import type { Hash } from '../types/misc.js';
import type { OpStackRpcBlockOverrides } from './types/block.js';
import type { OpStackRpcTransaction, OpStackRpcTransactionReceiptOverrides, OpStackTransaction } from './types/transaction.js';
export declare const formatters: {
    readonly block: {
        exclude: [] | undefined;
        format: (args: import("../types/utils.js").Assign<import("../index.js").ExactPartial<import("../types/rpc.js").RpcBlock>, OpStackRpcBlockOverrides & {
            transactions: Hash[] | OpStackRpcTransaction[];
        }>) => {
            baseFeePerGas: bigint | null;
            blobGasUsed: bigint;
            difficulty: bigint;
            excessBlobGas: bigint;
            extraData: import("../types/misc.js").Hex;
            gasLimit: bigint;
            gasUsed: bigint;
            hash: `0x${string}` | null;
            logsBloom: `0x${string}` | null;
            miner: import("abitype").Address;
            mixHash: Hash;
            nonce: `0x${string}` | null;
            number: bigint | null;
            parentHash: Hash;
            receiptsRoot: import("../types/misc.js").Hex;
            sealFields: import("../types/misc.js").Hex[];
            sha3Uncles: Hash;
            size: bigint;
            stateRoot: Hash;
            timestamp: bigint;
            totalDifficulty: bigint | null;
            transactions: `0x${string}`[] | OpStackTransaction[];
            transactionsRoot: Hash;
            uncles: Hash[];
            withdrawals?: import("../index.js").Withdrawal[] | undefined;
            withdrawalsRoot?: import("../types/misc.js").Hex | undefined;
        } & {};
        type: "block";
    };
    readonly transaction: {
        exclude: [] | undefined;
        format: (args: ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            yParity?: `0x${string}` | undefined;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: undefined;
            blobVersionedHashes?: undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
        } & {
            type: "0x0";
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            v: `0x${string}`;
            yParity?: undefined;
            gasPrice: `0x${string}`;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            to: import("abitype").Address | null;
            from: import("abitype").Address;
            gas: `0x${string}`;
            nonce: `0x${string}`;
            value: `0x${string}`;
            accessList?: undefined;
            blobVersionedHashes?: undefined;
            blockHash: `0x${string}` | null;
            blockNumber: `0x${string}` | null;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            transactionIndex: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
        } & {
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        }) | ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            yParity?: `0x${string}` | undefined;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: undefined;
            blobVersionedHashes?: undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
        } & Omit<import("../index.js").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("../index.js").FeeValuesEIP1559<`0x${string}`> & {
            isSystemTx?: boolean | undefined;
            mint?: import("../types/misc.js").Hex | undefined;
            sourceHash: import("../types/misc.js").Hex;
            type: "0x7e";
        }) | ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: import("../index.js").AccessList | undefined;
            blobVersionedHashes?: undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
            yParity?: `0x${string}` | undefined;
        } & {
            type: "0x0";
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            v: `0x${string}`;
            yParity?: undefined;
            gasPrice: `0x${string}`;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            to: import("abitype").Address | null;
            from: import("abitype").Address;
            gas: `0x${string}`;
            nonce: `0x${string}`;
            value: `0x${string}`;
            accessList?: undefined;
            blobVersionedHashes?: undefined;
            blockHash: `0x${string}` | null;
            blockNumber: `0x${string}` | null;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            transactionIndex: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
        } & {
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        }) | ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: import("../index.js").AccessList | undefined;
            blobVersionedHashes?: undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
            yParity?: `0x${string}` | undefined;
        } & {
            type: "0x1";
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            v: `0x${string}`;
            gasPrice: `0x${string}`;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            to: import("abitype").Address | null;
            from: import("abitype").Address;
            gas: `0x${string}`;
            nonce: `0x${string}`;
            value: `0x${string}`;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes?: undefined;
            blockHash: `0x${string}` | null;
            blockNumber: `0x${string}` | null;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            transactionIndex: `0x${string}` | null;
            chainId: `0x${string}`;
            yParity?: `0x${string}` | undefined;
        } & {
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        }) | ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: import("../index.js").AccessList | undefined;
            blobVersionedHashes?: undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
            yParity?: `0x${string}` | undefined;
        } & {
            type: "0x2";
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            v: `0x${string}`;
            gasPrice?: undefined;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas: `0x${string}`;
            maxPriorityFeePerGas: `0x${string}`;
            to: import("abitype").Address | null;
            from: import("abitype").Address;
            gas: `0x${string}`;
            nonce: `0x${string}`;
            value: `0x${string}`;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes?: undefined;
            blockHash: `0x${string}` | null;
            blockNumber: `0x${string}` | null;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            transactionIndex: `0x${string}` | null;
            chainId: `0x${string}`;
            yParity?: `0x${string}` | undefined;
        } & {
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        }) | ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: import("../index.js").AccessList | undefined;
            blobVersionedHashes?: undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
            yParity?: `0x${string}` | undefined;
        } & Omit<import("../index.js").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("../index.js").FeeValuesEIP1559<`0x${string}`> & {
            isSystemTx?: boolean | undefined;
            mint?: import("../types/misc.js").Hex | undefined;
            sourceHash: import("../types/misc.js").Hex;
            type: "0x7e";
        }) | ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: import("../index.js").AccessList | undefined;
            blobVersionedHashes?: undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
            yParity?: `0x${string}` | undefined;
        } & {
            type: "0x0";
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            v: `0x${string}`;
            yParity?: undefined;
            gasPrice: `0x${string}`;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            to: import("abitype").Address | null;
            from: import("abitype").Address;
            gas: `0x${string}`;
            nonce: `0x${string}`;
            value: `0x${string}`;
            accessList?: undefined;
            blobVersionedHashes?: undefined;
            blockHash: `0x${string}` | null;
            blockNumber: `0x${string}` | null;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            transactionIndex: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
        } & {
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        }) | ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: import("../index.js").AccessList | undefined;
            blobVersionedHashes?: undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
            yParity?: `0x${string}` | undefined;
        } & {
            type: "0x1";
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            v: `0x${string}`;
            gasPrice: `0x${string}`;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            to: import("abitype").Address | null;
            from: import("abitype").Address;
            gas: `0x${string}`;
            nonce: `0x${string}`;
            value: `0x${string}`;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes?: undefined;
            blockHash: `0x${string}` | null;
            blockNumber: `0x${string}` | null;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            transactionIndex: `0x${string}` | null;
            chainId: `0x${string}`;
            yParity?: `0x${string}` | undefined;
        } & {
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        }) | ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: import("../index.js").AccessList | undefined;
            blobVersionedHashes?: undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
            yParity?: `0x${string}` | undefined;
        } & {
            type: "0x2";
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            v: `0x${string}`;
            gasPrice?: undefined;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas: `0x${string}`;
            maxPriorityFeePerGas: `0x${string}`;
            to: import("abitype").Address | null;
            from: import("abitype").Address;
            gas: `0x${string}`;
            nonce: `0x${string}`;
            value: `0x${string}`;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes?: undefined;
            blockHash: `0x${string}` | null;
            blockNumber: `0x${string}` | null;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            transactionIndex: `0x${string}` | null;
            chainId: `0x${string}`;
            yParity?: `0x${string}` | undefined;
        } & {
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        }) | ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: import("../index.js").AccessList | undefined;
            blobVersionedHashes?: undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
            yParity?: `0x${string}` | undefined;
        } & Omit<import("../index.js").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("../index.js").FeeValuesEIP1559<`0x${string}`> & {
            isSystemTx?: boolean | undefined;
            mint?: import("../types/misc.js").Hex | undefined;
            sourceHash: import("../types/misc.js").Hex;
            type: "0x7e";
        }) | ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: import("../index.js").AccessList | undefined;
            blobVersionedHashes?: readonly `0x${string}`[] | undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
            yParity?: `0x${string}` | undefined;
        } & {
            type: "0x0";
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            v: `0x${string}`;
            yParity?: undefined;
            gasPrice: `0x${string}`;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            to: import("abitype").Address | null;
            from: import("abitype").Address;
            gas: `0x${string}`;
            nonce: `0x${string}`;
            value: `0x${string}`;
            accessList?: undefined;
            blobVersionedHashes?: undefined;
            blockHash: `0x${string}` | null;
            blockNumber: `0x${string}` | null;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            transactionIndex: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
        } & {
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        }) | ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: import("../index.js").AccessList | undefined;
            blobVersionedHashes?: readonly `0x${string}`[] | undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
            yParity?: `0x${string}` | undefined;
        } & {
            type: "0x1";
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            v: `0x${string}`;
            gasPrice: `0x${string}`;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            to: import("abitype").Address | null;
            from: import("abitype").Address;
            gas: `0x${string}`;
            nonce: `0x${string}`;
            value: `0x${string}`;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes?: undefined;
            blockHash: `0x${string}` | null;
            blockNumber: `0x${string}` | null;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            transactionIndex: `0x${string}` | null;
            chainId: `0x${string}`;
            yParity?: `0x${string}` | undefined;
        } & {
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        }) | ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: import("../index.js").AccessList | undefined;
            blobVersionedHashes?: readonly `0x${string}`[] | undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
            yParity?: `0x${string}` | undefined;
        } & {
            type: "0x2";
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            v: `0x${string}`;
            gasPrice?: undefined;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas: `0x${string}`;
            maxPriorityFeePerGas: `0x${string}`;
            to: import("abitype").Address | null;
            from: import("abitype").Address;
            gas: `0x${string}`;
            nonce: `0x${string}`;
            value: `0x${string}`;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes?: undefined;
            blockHash: `0x${string}` | null;
            blockNumber: `0x${string}` | null;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            transactionIndex: `0x${string}` | null;
            chainId: `0x${string}`;
            yParity?: `0x${string}` | undefined;
        } & {
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        }) | ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: import("../index.js").AccessList | undefined;
            blobVersionedHashes?: readonly `0x${string}`[] | undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
            yParity?: `0x${string}` | undefined;
        } & {
            type: "0x3";
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            v: `0x${string}`;
            gasPrice?: undefined;
            maxFeePerBlobGas: `0x${string}`;
            maxFeePerGas: `0x${string}`;
            maxPriorityFeePerGas: `0x${string}`;
            to: import("abitype").Address | null;
            from: import("abitype").Address;
            gas: `0x${string}`;
            nonce: `0x${string}`;
            value: `0x${string}`;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes: readonly import("../types/misc.js").Hex[];
            blockHash: `0x${string}` | null;
            blockNumber: `0x${string}` | null;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            transactionIndex: `0x${string}` | null;
            chainId: `0x${string}`;
            yParity?: `0x${string}` | undefined;
        } & {
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        }) | ({
            type?: "0x0" | "0x1" | "0x2" | "0x3" | "0x7e";
            r?: import("../types/misc.js").Hex;
            s?: import("../types/misc.js").Hex;
            v?: `0x${string}`;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerBlobGas?: `0x${string}` | undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            to?: import("abitype").Address | null;
            from?: import("abitype").Address;
            gas?: `0x${string}`;
            nonce?: `0x${string}`;
            value?: `0x${string}`;
            accessList?: import("../index.js").AccessList | undefined;
            blobVersionedHashes?: readonly `0x${string}`[] | undefined;
            blockHash?: `0x${string}` | null;
            blockNumber?: `0x${string}` | null;
            hash?: Hash;
            input?: import("../types/misc.js").Hex;
            transactionIndex?: `0x${string}` | null;
            chainId?: `0x${string}` | undefined;
            yParity?: `0x${string}` | undefined;
        } & Omit<import("../index.js").TransactionBase<`0x${string}`, `0x${string}`, boolean>, "typeHex"> & import("../index.js").FeeValuesEIP1559<`0x${string}`> & {
            isSystemTx?: boolean | undefined;
            mint?: import("../types/misc.js").Hex | undefined;
            sourceHash: import("../types/misc.js").Hex;
            type: "0x7e";
        })) => ({
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            v: bigint;
            to: import("abitype").Address | null;
            from: import("abitype").Address;
            gas: bigint;
            nonce: number;
            value: bigint;
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            transactionIndex: number | null;
            typeHex: import("../types/misc.js").Hex | null;
            accessList?: undefined;
            blobVersionedHashes?: undefined;
            chainId?: number | undefined;
            yParity?: undefined;
            type: "legacy";
            gasPrice: bigint;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        } | {
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            v: bigint;
            to: import("abitype").Address | null;
            from: import("abitype").Address;
            gas: bigint;
            nonce: number;
            value: bigint;
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            transactionIndex: number | null;
            typeHex: import("../types/misc.js").Hex | null;
            accessList?: undefined;
            blobVersionedHashes?: undefined;
            chainId?: number | undefined;
            yParity: number;
            type: "deposit";
            gasPrice: undefined;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            isSystemTx?: boolean;
            mint?: bigint | undefined;
            sourceHash: import("../types/misc.js").Hex;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: import("abitype").Address;
            gas: bigint;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            nonce: number;
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            to: import("abitype").Address | null;
            transactionIndex: number | null;
            typeHex: import("../types/misc.js").Hex | null;
            v: bigint;
            value: bigint;
            yParity: number;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes?: undefined;
            chainId: number;
            type: "eip2930";
            gasPrice: bigint;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: import("abitype").Address;
            gas: bigint;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            nonce: number;
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            to: import("abitype").Address | null;
            transactionIndex: number | null;
            typeHex: import("../types/misc.js").Hex | null;
            v: bigint;
            value: bigint;
            yParity: number;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes?: undefined;
            chainId: number;
            type: "eip1559";
            gasPrice: undefined;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: import("abitype").Address;
            gas: bigint;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            nonce: number;
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            to: import("abitype").Address | null;
            transactionIndex: number | null;
            typeHex: import("../types/misc.js").Hex | null;
            v: bigint;
            value: bigint;
            yParity: number;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes?: undefined;
            chainId: number;
            type: "deposit";
            gasPrice: undefined;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            isSystemTx?: boolean;
            mint?: bigint | undefined;
            sourceHash: import("../types/misc.js").Hex;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: import("abitype").Address;
            gas: bigint;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            nonce: number;
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            to: import("abitype").Address | null;
            transactionIndex: number | null;
            typeHex: import("../types/misc.js").Hex | null;
            v: bigint;
            value: bigint;
            yParity: number;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes?: undefined;
            chainId: number;
            type: "eip2930";
            gasPrice: bigint;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas: undefined;
            maxPriorityFeePerGas: undefined;
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: import("abitype").Address;
            gas: bigint;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            nonce: number;
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            to: import("abitype").Address | null;
            transactionIndex: number | null;
            typeHex: import("../types/misc.js").Hex | null;
            v: bigint;
            value: bigint;
            yParity: number;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes?: undefined;
            chainId: number;
            type: "eip1559";
            gasPrice?: undefined;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: import("abitype").Address;
            gas: bigint;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            nonce: number;
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            to: import("abitype").Address | null;
            transactionIndex: number | null;
            typeHex: import("../types/misc.js").Hex | null;
            v: bigint;
            value: bigint;
            yParity: number;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes?: undefined;
            chainId: number;
            type: "deposit";
            gasPrice?: undefined;
            maxFeePerBlobGas?: undefined;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            isSystemTx?: boolean;
            mint?: bigint | undefined;
            sourceHash: import("../types/misc.js").Hex;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: import("abitype").Address;
            gas: bigint;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            nonce: number;
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            to: import("abitype").Address | null;
            transactionIndex: number | null;
            typeHex: import("../types/misc.js").Hex | null;
            v: bigint;
            value: bigint;
            yParity: number;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes: readonly import("../types/misc.js").Hex[];
            chainId: number;
            type: "eip4844";
            gasPrice?: undefined;
            maxFeePerBlobGas: bigint;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: import("abitype").Address;
            gas: bigint;
            hash: Hash;
            input: import("../types/misc.js").Hex;
            nonce: number;
            r: import("../types/misc.js").Hex;
            s: import("../types/misc.js").Hex;
            to: import("abitype").Address | null;
            transactionIndex: number | null;
            typeHex: import("../types/misc.js").Hex | null;
            v: bigint;
            value: bigint;
            yParity: number;
            accessList: import("../index.js").AccessList;
            blobVersionedHashes: readonly import("../types/misc.js").Hex[];
            chainId: number;
            type: "deposit";
            gasPrice?: undefined;
            maxFeePerBlobGas: undefined;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            isSystemTx?: boolean;
            mint?: bigint | undefined;
            sourceHash: import("../types/misc.js").Hex;
        }) & {};
        type: "transaction";
    };
    readonly transactionReceipt: {
        exclude: [] | undefined;
        format: (args: import("../types/utils.js").Assign<import("../index.js").ExactPartial<import("../types/rpc.js").RpcTransactionReceipt>, OpStackRpcTransactionReceiptOverrides>) => {
            blobGasPrice?: bigint | undefined;
            blobGasUsed?: bigint | undefined;
            blockHash: Hash;
            blockNumber: bigint;
            contractAddress: import("abitype").Address | null | undefined;
            cumulativeGasUsed: bigint;
            effectiveGasPrice: bigint;
            from: import("abitype").Address;
            gasUsed: bigint;
            logs: import("../index.js").Log<bigint, number, false>[];
            logsBloom: import("../types/misc.js").Hex;
            root?: Hash | undefined;
            status: "success" | "reverted";
            to: import("abitype").Address | null;
            transactionHash: Hash;
            transactionIndex: number;
            type: import("../index.js").TransactionType;
            l1GasPrice: bigint | null;
            l1GasUsed: bigint | null;
            l1Fee: bigint | null;
            l1FeeScalar: number | null;
        } & {};
        type: "transactionReceipt";
    };
};
//# sourceMappingURL=formatters.d.ts.map