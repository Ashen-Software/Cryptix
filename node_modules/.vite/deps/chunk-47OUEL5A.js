import {
  reservedScreens,
  useActiveAccount
} from "./chunk-BFEMHPGA.js";
import {
  require_react
} from "./chunk-A4STD2P3.js";
import {
  __toESM
} from "./chunk-SEVZ5PBP.js";

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/Modal/screen.js
var import_react = __toESM(require_react(), 1);
var ScreenSetupContext = (0, import_react.createContext)(void 0);
function useSetupScreen(props) {
  let initialScreen = reservedScreens.main;
  const socialLogin = props.wallets.find((w) => w.id === "embedded" || w.id === "inApp");
  if (props.wallets.length === 1 && props.wallets[0]) {
    initialScreen = props.wallets[0];
  } else if (props.size === "wide" && !props.welcomeScreen && socialLogin) {
    initialScreen = socialLogin;
  }
  const [screen, setScreen] = (0, import_react.useState)(initialScreen);
  const prevInitialScreen = (0, import_react.useRef)(initialScreen);
  const activeAccount = useActiveAccount();
  (0, import_react.useEffect)(() => {
    if (initialScreen !== prevInitialScreen.current) {
      prevInitialScreen.current = initialScreen;
      setScreen(initialScreen);
    }
  }, [initialScreen]);
  (0, import_react.useEffect)(() => {
    if (!activeAccount && screen === reservedScreens.signIn) {
      setScreen(reservedScreens.main);
    }
  }, [activeAccount, screen]);
  return {
    screen,
    setScreen,
    initialScreen
  };
}
function useScreenContext() {
  const ctx = (0, import_react.useContext)(ScreenSetupContext);
  if (!ctx) {
    throw new Error("useScreenContext must be used within a <ScreenProvider />");
  }
  return ctx;
}

export {
  ScreenSetupContext,
  useSetupScreen,
  useScreenContext
};
//# sourceMappingURL=chunk-47OUEL5A.js.map
