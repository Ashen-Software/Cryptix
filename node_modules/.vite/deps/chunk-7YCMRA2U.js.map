{
  "version": 3,
  "sources": ["../../thirdweb/src/transaction/transaction-store.ts"],
  "sourcesContent": ["import { type Store, createStore } from \"../reactive/store.js\";\nimport type { Hex } from \"../utils/encoding/hex.js\";\n\nexport type StoredTransaction = {\n  transactionHash: Hex;\n  chainId: number;\n};\n\nconst transactionsByAddress = new Map<string, Store<StoredTransaction[]>>();\n\n/**\n * Retrieve the transaction store for a given address.\n * @param address - The address to retrieve the transaction store for.\n * @returns A store of transactions for the given account to subscribe to.\n */\nexport function getTransactionStore(\n  address: string,\n): Store<StoredTransaction[]> {\n  const existingStore = transactionsByAddress.get(address);\n  if (existingStore) {\n    return existingStore;\n  }\n\n  const newStore = createStore<StoredTransaction[]>([]);\n  transactionsByAddress.set(address, newStore);\n  return newStore;\n}\n\n/**\n * @internal\n */\nexport function addTransactionToStore(options: {\n  address: string;\n  transactionHash: Hex;\n  chainId: number;\n}) {\n  const { address, transactionHash, chainId } = options;\n  const tranasctionStore = getTransactionStore(address);\n\n  tranasctionStore.setValue([\n    ...tranasctionStore.getValue(),\n    { transactionHash, chainId },\n  ]);\n\n  transactionsByAddress.set(address, tranasctionStore);\n}\n"],
  "mappings": ";;;;;AAQA,IAAM,wBAAwB,oBAAI,IAAG;AAO/B,SAAU,oBACd,SAAe;AAEf,QAAM,gBAAgB,sBAAsB,IAAI,OAAO;AACvD,MAAI,eAAe;AACjB,WAAO;EACT;AAEA,QAAM,WAAW,YAAiC,CAAA,CAAE;AACpD,wBAAsB,IAAI,SAAS,QAAQ;AAC3C,SAAO;AACT;AAKM,SAAU,sBAAsB,SAIrC;AACC,QAAM,EAAE,SAAS,iBAAiB,QAAO,IAAK;AAC9C,QAAM,mBAAmB,oBAAoB,OAAO;AAEpD,mBAAiB,SAAS;IACxB,GAAG,iBAAiB,SAAQ;IAC5B,EAAE,iBAAiB,QAAO;GAC3B;AAED,wBAAsB,IAAI,SAAS,gBAAgB;AACrD;",
  "names": []
}
