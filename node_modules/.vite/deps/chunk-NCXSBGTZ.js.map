{
  "version": 3,
  "sources": ["../../thirdweb/src/transaction/actions/encode.ts"],
  "sourcesContent": ["import type { Abi, AbiFunction } from \"abitype\";\nimport type { Hex } from \"../../utils/encoding/hex.js\";\nimport type { PreparedTransaction } from \"../prepare-transaction.js\";\n\nconst encodeWeakMap = new WeakMap<\n  PreparedTransaction<Abi, AbiFunction>,\n  Promise<Hex>\n>();\n\n/**\n * Encodes a transaction object into a hexadecimal string representation of the encoded data.\n * @param transaction - The transaction object to encode.\n * @returns A promise that resolves to the encoded data as a hexadecimal string.\n * @transaction\n * @example\n * ```ts\n * import { encode } from \"thirdweb\";\n * const encodedData = await encode(transaction);\n * ```\n */\nexport async function encode<abi extends Abi, abiFn extends AbiFunction>(\n  transaction: PreparedTransaction<abi, abiFn>,\n): Promise<Hex> {\n  if (encodeWeakMap.has(transaction)) {\n    // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set\n    return encodeWeakMap.get(transaction)!;\n  }\n  const promise = (async () => {\n    if (transaction.data === undefined) {\n      return \"0x\";\n    }\n    if (typeof transaction.data === \"function\") {\n      const data = await transaction.data();\n      if (!data) {\n        return \"0x\";\n      }\n      return data;\n    }\n    return transaction.data;\n  })();\n  encodeWeakMap.set(transaction, promise);\n  return promise;\n}\n"],
  "mappings": ";AAIA,IAAM,gBAAgB,oBAAI,QAAO;AAgBjC,eAAsB,OACpB,aAA4C;AAE5C,MAAI,cAAc,IAAI,WAAW,GAAG;AAElC,WAAO,cAAc,IAAI,WAAW;EACtC;AACA,QAAM,WAAW,YAAW;AAC1B,QAAI,YAAY,SAAS,QAAW;AAClC,aAAO;IACT;AACA,QAAI,OAAO,YAAY,SAAS,YAAY;AAC1C,YAAM,OAAO,MAAM,YAAY,KAAI;AACnC,UAAI,CAAC,MAAM;AACT,eAAO;MACT;AACA,aAAO;IACT;AACA,WAAO,YAAY;EACrB,GAAE;AACF,gBAAc,IAAI,aAAa,OAAO;AACtC,SAAO;AACT;",
  "names": []
}
