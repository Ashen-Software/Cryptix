import {
  sendAndConfirmTransaction,
  sendBatchTransaction
} from "./chunk-CPACGKSU.js";
import {
  eth_getTransactionReceipt
} from "./chunk-3FNFQJO5.js";
import "./chunk-KVTKFUNA.js";
import "./chunk-JRJTWVCA.js";
import "./chunk-3SOZ25XX.js";
import "./chunk-ZDQH37F2.js";
import "./chunk-7YCMRA2U.js";
import "./chunk-OSZAYZBM.js";
import "./chunk-OEOA3HT2.js";
import "./chunk-2I6BQZFD.js";
import "./chunk-3NAETAKT.js";
import "./chunk-LW7EMTNJ.js";
import "./chunk-BSASUUNP.js";
import "./chunk-MQIGPFEC.js";
import "./chunk-NMJW5RZU.js";
import "./chunk-PZWOPBWI.js";
import {
  uint8ArrayToHex
} from "./chunk-3JG4JMZX.js";
import "./chunk-GDDTQ4UI.js";
import "./chunk-WF2UJPJG.js";
import {
  getRpcClient
} from "./chunk-HGWZNQ5H.js";
import "./chunk-TRL57KBW.js";
import "./chunk-NMVKDFRL.js";
import "./chunk-MHFR2GDE.js";
import "./chunk-CVWITOXT.js";
import "./chunk-SHWHM7JY.js";
import "./chunk-EZ4JTQAA.js";
import "./chunk-ZAXCNZIK.js";
import "./chunk-Z2F5LG57.js";
import "./chunk-HK3KI3RB.js";
import "./chunk-EWAXOTDC.js";
import "./chunk-TEQAYQEZ.js";
import "./chunk-NCXSBGTZ.js";
import "./chunk-SEVZ5PBP.js";

// node_modules/thirdweb/dist/esm/utils/random.js
function randomBytesHex(length = 32) {
  return uint8ArrayToHex(randomBytesBuffer(length));
}
function randomBytesBuffer(length = 32) {
  return globalThis.crypto.getRandomValues(new Uint8Array(length));
}

// node_modules/thirdweb/dist/esm/wallets/in-app/core/eip5972/in-app-wallet-calls.js
var bundlesToTransactions = /* @__PURE__ */ new Map();
var MAX_BUNDLE_ENTRIES = 1e3;
function setBundleId(bundleId, hashes) {
  if (bundlesToTransactions.size >= MAX_BUNDLE_ENTRIES) {
    const lru = bundlesToTransactions.keys().next().value;
    bundlesToTransactions.delete(lru);
  }
  bundlesToTransactions.set(bundleId, hashes);
}
async function inAppWalletSendCalls(args) {
  const { account, calls } = args;
  const hashes = [];
  const bundleId = randomBytesHex(65);
  bundlesToTransactions.set(bundleId, hashes);
  if (account.sendBatchTransaction) {
    const receipt = await sendBatchTransaction({
      account,
      transactions: calls
    });
    hashes.push(receipt.transactionHash);
    setBundleId(bundleId, hashes);
  } else {
    for (const tx of calls) {
      const receipt = await sendAndConfirmTransaction({
        account,
        transaction: tx
      });
      hashes.push(receipt.transactionHash);
      bundlesToTransactions.set(bundleId, hashes);
    }
  }
  return bundleId;
}
async function inAppWalletGetCallsStatus(args) {
  const { wallet, client, bundleId } = args;
  const chain = wallet.getChain();
  if (!chain) {
    throw new Error("Failed to get calls status, no active chain found");
  }
  const bundle = bundlesToTransactions.get(bundleId);
  if (!bundle) {
    throw new Error("Failed to get calls status, unknown bundle id");
  }
  const request = getRpcClient({ client, chain });
  let status = "CONFIRMED";
  const receipts = await Promise.all(bundle.map((hash) => eth_getTransactionReceipt(request, { hash }).then((receipt) => ({
    logs: receipt.logs.map((l) => ({
      address: l.address,
      data: l.data,
      topics: l.topics
    })),
    status: receipt.status,
    blockHash: receipt.blockHash,
    blockNumber: receipt.blockNumber,
    gasUsed: receipt.gasUsed,
    transactionHash: receipt.transactionHash
  })).catch(() => {
    status = "PENDING";
    return null;
  })));
  return {
    status,
    receipts: receipts.filter((r) => r !== null)
    // ts 5.5 please come we need you
  };
}
export {
  inAppWalletGetCallsStatus,
  inAppWalletSendCalls
};
//# sourceMappingURL=in-app-wallet-calls-YZIV6KCT.js.map
