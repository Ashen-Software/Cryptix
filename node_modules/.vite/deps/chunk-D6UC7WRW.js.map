{
  "version": 3,
  "sources": ["../../thirdweb/src/wallets/in-app/core/wallet/in-app-core.ts"],
  "sourcesContent": ["import { trackConnect } from \"../../../../analytics/track.js\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport type { Account, Wallet } from \"../../../interfaces/wallet.js\";\nimport { createWalletEmitter } from \"../../../wallet-emitter.js\";\nimport type { CreateWalletArgs } from \"../../../wallet-types.js\";\nimport type { Ecosystem } from \"../../web/types.js\";\nimport type { InAppConnector } from \"../interfaces/connector.js\";\n\nconst connectorCache = new WeakMap<\n  { client: ThirdwebClient; ecosystem?: Ecosystem },\n  InAppConnector\n>();\n\n/**\n * @internal\n */\nexport async function getOrCreateInAppWalletConnector(\n  client: ThirdwebClient,\n  connectorFactory: (client: ThirdwebClient) => Promise<InAppConnector>,\n  ecosystem?: Ecosystem,\n) {\n  const key = { client, ecosystem };\n  if (connectorCache.has(key)) {\n    return connectorCache.get(key) as InAppConnector;\n  }\n  const connector = await connectorFactory(client);\n  connectorCache.set(key, connector);\n  return connector;\n}\n\n/**\n * @internal\n */\nexport function createInAppWallet(args: {\n  createOptions?: CreateWalletArgs<\"inApp\">[1];\n  connectorFactory: (client: ThirdwebClient) => Promise<InAppConnector>;\n}): Wallet<\"inApp\"> {\n  const { createOptions, connectorFactory } = args;\n  const emitter = createWalletEmitter<\"inApp\">();\n  let account: Account | undefined = undefined;\n  let chain: Chain | undefined = undefined;\n  let client: ThirdwebClient | undefined;\n\n  return {\n    id: \"inApp\",\n    subscribe: emitter.subscribe,\n    getChain: () => chain,\n    getConfig: () => createOptions,\n    getAccount: () => account,\n    autoConnect: async (options) => {\n      const { autoConnectInAppWallet } = await import(\"./index.js\");\n\n      const connector = await getOrCreateInAppWalletConnector(\n        options.client,\n        connectorFactory,\n      );\n      const [connectedAccount, connectedChain] = await autoConnectInAppWallet(\n        options,\n        createOptions,\n        connector,\n      );\n      // set the states\n      client = options.client;\n      account = connectedAccount;\n      chain = connectedChain;\n      trackConnect({\n        client: options.client,\n        walletType: \"inApp\",\n        walletAddress: account.address,\n      });\n      // return only the account\n      return account;\n    },\n    connect: async (options) => {\n      const { connectInAppWallet } = await import(\"./index.js\");\n\n      const connector = await getOrCreateInAppWalletConnector(\n        options.client,\n        connectorFactory,\n      );\n      const [connectedAccount, connectedChain] = await connectInAppWallet(\n        options,\n        createOptions,\n        connector,\n      );\n      // set the states\n      client = options.client;\n      account = connectedAccount;\n      chain = connectedChain;\n      trackConnect({\n        client: options.client,\n        walletType: \"inApp\",\n        walletAddress: account.address,\n      });\n      // return only the account\n      return account;\n    },\n    disconnect: async () => {\n      // If no client is assigned, we should be fine just unsetting the states\n      if (client) {\n        const connector = await getOrCreateInAppWalletConnector(\n          client,\n          connectorFactory,\n        );\n        const result = await connector.logout();\n        if (!result.success) {\n          throw new Error(\"Failed to logout\");\n        }\n      }\n      account = undefined;\n      chain = undefined;\n      emitter.emit(\"disconnect\", undefined);\n    },\n    switchChain: async (newChain) => {\n      if (createOptions?.smartAccount && client && account) {\n        // if account abstraction is enabled, reconnect to smart account on the new chain\n        const { autoConnectInAppWallet } = await import(\"./index.js\");\n        const connector = await getOrCreateInAppWalletConnector(\n          client,\n          connectorFactory,\n        );\n        const [connectedAccount, connectedChain] = await autoConnectInAppWallet(\n          {\n            chain: newChain,\n            client,\n          },\n          createOptions,\n          connector,\n        );\n        account = connectedAccount;\n        chain = connectedChain;\n      } else {\n        // if not, simply set the new chain\n        chain = newChain;\n      }\n      emitter.emit(\"chainChanged\", newChain);\n    },\n  };\n}\n"],
  "mappings": ";;;;;;AASA,IAAM,iBAAiB,oBAAI,QAAO;AAQlC,eAAsB,gCACpB,QACA,kBACA,WAAqB;AAErB,QAAM,MAAM,EAAE,QAAQ,UAAS;AAC/B,MAAI,eAAe,IAAI,GAAG,GAAG;AAC3B,WAAO,eAAe,IAAI,GAAG;EAC/B;AACA,QAAM,YAAY,MAAM,iBAAiB,MAAM;AAC/C,iBAAe,IAAI,KAAK,SAAS;AACjC,SAAO;AACT;AAKM,SAAU,kBAAkB,MAGjC;AACC,QAAM,EAAE,eAAe,iBAAgB,IAAK;AAC5C,QAAM,UAAU,oBAAmB;AACnC,MAAI,UAA+B;AACnC,MAAI,QAA2B;AAC/B,MAAI;AAEJ,SAAO;IACL,IAAI;IACJ,WAAW,QAAQ;IACnB,UAAU,MAAM;IAChB,WAAW,MAAM;IACjB,YAAY,MAAM;IAClB,aAAa,OAAO,YAAW;AAC7B,YAAM,EAAE,uBAAsB,IAAK,MAAM,OAAO,sBAAY;AAE5D,YAAM,YAAY,MAAM,gCACtB,QAAQ,QACR,gBAAgB;AAElB,YAAM,CAAC,kBAAkB,cAAc,IAAI,MAAM,uBAC/C,SACA,eACA,SAAS;AAGX,eAAS,QAAQ;AACjB,gBAAU;AACV,cAAQ;AACR,mBAAa;QACX,QAAQ,QAAQ;QAChB,YAAY;QACZ,eAAe,QAAQ;OACxB;AAED,aAAO;IACT;IACA,SAAS,OAAO,YAAW;AACzB,YAAM,EAAE,mBAAkB,IAAK,MAAM,OAAO,sBAAY;AAExD,YAAM,YAAY,MAAM,gCACtB,QAAQ,QACR,gBAAgB;AAElB,YAAM,CAAC,kBAAkB,cAAc,IAAI,MAAM,mBAC/C,SACA,eACA,SAAS;AAGX,eAAS,QAAQ;AACjB,gBAAU;AACV,cAAQ;AACR,mBAAa;QACX,QAAQ,QAAQ;QAChB,YAAY;QACZ,eAAe,QAAQ;OACxB;AAED,aAAO;IACT;IACA,YAAY,YAAW;AAErB,UAAI,QAAQ;AACV,cAAM,YAAY,MAAM,gCACtB,QACA,gBAAgB;AAElB,cAAM,SAAS,MAAM,UAAU,OAAM;AACrC,YAAI,CAAC,OAAO,SAAS;AACnB,gBAAM,IAAI,MAAM,kBAAkB;QACpC;MACF;AACA,gBAAU;AACV,cAAQ;AACR,cAAQ,KAAK,cAAc,MAAS;IACtC;IACA,aAAa,OAAO,aAAY;AAC9B,WAAI,+CAAe,iBAAgB,UAAU,SAAS;AAEpD,cAAM,EAAE,uBAAsB,IAAK,MAAM,OAAO,sBAAY;AAC5D,cAAM,YAAY,MAAM,gCACtB,QACA,gBAAgB;AAElB,cAAM,CAAC,kBAAkB,cAAc,IAAI,MAAM,uBAC/C;UACE,OAAO;UACP;WAEF,eACA,SAAS;AAEX,kBAAU;AACV,gBAAQ;MACV,OAAO;AAEL,gBAAQ;MACV;AACA,cAAQ,KAAK,gBAAgB,QAAQ;IACvC;;AAEJ;",
  "names": []
}
