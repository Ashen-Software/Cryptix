{
  "version": 3,
  "sources": ["../../thirdweb/src/wallets/smart/smart-wallet.ts"],
  "sourcesContent": ["import { trackConnect } from \"../../analytics/track.js\";\nimport type { Chain } from \"../../chains/types.js\";\nimport { getContract } from \"../../contract/contract.js\";\nimport { isContractDeployed } from \"../../utils/bytecode/is-contract-deployed.js\";\nimport type { Account, Wallet } from \"../interfaces/wallet.js\";\nimport { createWalletEmitter } from \"../wallet-emitter.js\";\nimport type {\n  CreateWalletArgs,\n  WalletConnectionOption,\n} from \"../wallet-types.js\";\nimport { DEFAULT_ACCOUNT_FACTORY } from \"./lib/constants.js\";\n\n/**\n * Creates a smart wallet.\n * @param createOptions - The options for creating the wallet.\n * @returns The created smart wallet.\n * @example\n * ```ts\n * import { smartWallet } from \"thirdweb/wallets\";\n *\n * const wallet = smartWallet({\n *  chain: sepolia,\n *  gasless: true,\n * });\n *\n * const account = await wallet.connect({\n *   client,\n *   personalAccount: account,\n * });\n * ```\n * @wallet\n */\nexport function smartWallet(\n  createOptions: CreateWalletArgs<\"smart\">[1],\n): Wallet<\"smart\"> {\n  const emitter = createWalletEmitter<\"smart\">();\n  let account: Account | undefined = undefined;\n  let chain: Chain | undefined = undefined;\n  let lastConnectOptions: WalletConnectionOption<\"smart\"> | undefined;\n\n  const _smartWallet: Wallet<\"smart\"> = {\n    id: \"smart\",\n    subscribe: emitter.subscribe,\n    getChain: () => chain,\n    getConfig: () => createOptions,\n    getAccount: () => account,\n    autoConnect: async (options) => {\n      const { connectSmartWallet } = await import(\"./index.js\");\n      const [connectedAccount, connectedChain] = await connectSmartWallet(\n        _smartWallet,\n        options,\n        createOptions,\n      );\n      // set the states\n      lastConnectOptions = options;\n      account = connectedAccount;\n      chain = connectedChain;\n      trackConnect({\n        client: options.client,\n        walletType: \"smart\",\n        walletAddress: account.address,\n      });\n      // return account\n      return account;\n    },\n    connect: async (options) => {\n      const { connectSmartWallet } = await import(\"./index.js\");\n      const [connectedAccount, connectedChain] = await connectSmartWallet(\n        _smartWallet,\n        options,\n        createOptions,\n      );\n      // set the states\n      lastConnectOptions = options;\n      account = connectedAccount;\n      chain = connectedChain;\n      trackConnect({\n        client: options.client,\n        walletType: \"smart\",\n        walletAddress: account.address,\n      });\n      // return account\n      emitter.emit(\"accountChanged\", account);\n      return account;\n    },\n    disconnect: async () => {\n      account = undefined;\n      chain = undefined;\n      const { disconnectSmartWallet } = await import(\"./index.js\");\n      await disconnectSmartWallet(_smartWallet);\n      emitter.emit(\"disconnect\", undefined);\n    },\n    switchChain: async (newChain: Chain) => {\n      if (!lastConnectOptions) {\n        throw new Error(\"Cannot switch chain without a previous connection\");\n      }\n      // check if factory is deployed\n      const factory = getContract({\n        address: createOptions.factoryAddress || DEFAULT_ACCOUNT_FACTORY,\n        chain: newChain,\n        client: lastConnectOptions.client,\n      });\n      const isDeployed = await isContractDeployed(factory);\n      if (!isDeployed) {\n        throw new Error(\n          `Factory contract not deployed on chain: ${newChain.id}`,\n        );\n      }\n      const { connectSmartWallet } = await import(\"./index.js\");\n      const [connectedAccount, connectedChain] = await connectSmartWallet(\n        _smartWallet,\n        { ...lastConnectOptions, chain: newChain },\n        createOptions,\n      );\n      // set the states\n      account = connectedAccount;\n      chain = connectedChain;\n      emitter.emit(\"chainChanged\", newChain);\n    },\n  };\n\n  return _smartWallet;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAgCM,SAAU,YACd,eAA2C;AAE3C,QAAM,UAAU,oBAAmB;AACnC,MAAI,UAA+B;AACnC,MAAI,QAA2B;AAC/B,MAAI;AAEJ,QAAM,eAAgC;IACpC,IAAI;IACJ,WAAW,QAAQ;IACnB,UAAU,MAAM;IAChB,WAAW,MAAM;IACjB,YAAY,MAAM;IAClB,aAAa,OAAO,YAAW;AAC7B,YAAM,EAAE,mBAAkB,IAAK,MAAM,OAAO,qBAAY;AACxD,YAAM,CAAC,kBAAkB,cAAc,IAAI,MAAM,mBAC/C,cACA,SACA,aAAa;AAGf,2BAAqB;AACrB,gBAAU;AACV,cAAQ;AACR,mBAAa;QACX,QAAQ,QAAQ;QAChB,YAAY;QACZ,eAAe,QAAQ;OACxB;AAED,aAAO;IACT;IACA,SAAS,OAAO,YAAW;AACzB,YAAM,EAAE,mBAAkB,IAAK,MAAM,OAAO,qBAAY;AACxD,YAAM,CAAC,kBAAkB,cAAc,IAAI,MAAM,mBAC/C,cACA,SACA,aAAa;AAGf,2BAAqB;AACrB,gBAAU;AACV,cAAQ;AACR,mBAAa;QACX,QAAQ,QAAQ;QAChB,YAAY;QACZ,eAAe,QAAQ;OACxB;AAED,cAAQ,KAAK,kBAAkB,OAAO;AACtC,aAAO;IACT;IACA,YAAY,YAAW;AACrB,gBAAU;AACV,cAAQ;AACR,YAAM,EAAE,sBAAqB,IAAK,MAAM,OAAO,qBAAY;AAC3D,YAAM,sBAAsB,YAAY;AACxC,cAAQ,KAAK,cAAc,MAAS;IACtC;IACA,aAAa,OAAO,aAAmB;AACrC,UAAI,CAAC,oBAAoB;AACvB,cAAM,IAAI,MAAM,mDAAmD;MACrE;AAEA,YAAM,UAAU,YAAY;QAC1B,SAAS,cAAc,kBAAkB;QACzC,OAAO;QACP,QAAQ,mBAAmB;OAC5B;AACD,YAAM,aAAa,MAAM,mBAAmB,OAAO;AACnD,UAAI,CAAC,YAAY;AACf,cAAM,IAAI,MACR,2CAA2C,SAAS,EAAE,EAAE;MAE5D;AACA,YAAM,EAAE,mBAAkB,IAAK,MAAM,OAAO,qBAAY;AACxD,YAAM,CAAC,kBAAkB,cAAc,IAAI,MAAM,mBAC/C,cACA,EAAE,GAAG,oBAAoB,OAAO,SAAQ,GACxC,aAAa;AAGf,gBAAU;AACV,cAAQ;AACR,cAAQ,KAAK,gBAAgB,QAAQ;IACvC;;AAGF,SAAO;AACT;",
  "names": []
}
