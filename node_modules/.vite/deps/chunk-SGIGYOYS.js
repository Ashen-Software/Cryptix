import {
  setLastAuthProvider
} from "./chunk-5TSRSVIC.js";
import {
  LoadingScreen
} from "./chunk-MYDXRGVE.js";
import {
  Input,
  InputContainer
} from "./chunk-BFEMHPGA.js";
import {
  ArrowRightIcon,
  Button,
  Container,
  CustomThemeProvider,
  IconButton,
  Img,
  Spacer,
  StyledDiv,
  StyledOption,
  StyledSelect,
  Text,
  emailIcon,
  fontSize,
  iconSize,
  newStyled,
  passkeyIcon,
  phoneIcon,
  radius,
  socialIcons,
  spacing,
  useCustomTheme,
  useQuery
} from "./chunk-TS42ER4K.js";
import {
  require_jsx_runtime
} from "./chunk-PQVTKVEJ.js";
import {
  require_react
} from "./chunk-A4STD2P3.js";
import {
  webLocalStorage
} from "./chunk-57DFWRZ3.js";
import {
  isEcosystemWallet
} from "./chunk-5R32MHFT.js";
import {
  getThirdwebBaseUrl
} from "./chunk-MHFR2GDE.js";
import {
  __toESM
} from "./chunk-SEVZ5PBP.js";

// node_modules/thirdweb/dist/esm/react/web/providers/wallet-ui-states-provider.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var WalletModalOpen = (0, import_react.createContext)(false);
var SetWalletModalOpen = (0, import_react.createContext)(() => {
});
var SelectionUIDataCtx = (0, import_react.createContext)({});
var SetSelectionUIDataCtx = (0, import_react.createContext)(() => {
});
var WalletUIStatesProvider = (props) => {
  const [isWalletModalOpen, setIsWalletModalOpen] = (0, import_react.useState)(props.isOpen);
  const [selectionUIData, setSelectionUIData] = (0, import_react.useState)({});
  return (0, import_jsx_runtime.jsx)(WalletModalOpen.Provider, { value: isWalletModalOpen, children: (0, import_jsx_runtime.jsx)(SetWalletModalOpen.Provider, { value: setIsWalletModalOpen, children: (0, import_jsx_runtime.jsx)(SelectionUIDataCtx.Provider, { value: selectionUIData, children: (0, import_jsx_runtime.jsx)(SetSelectionUIDataCtx.Provider, { value: setSelectionUIData, children: (0, import_jsx_runtime.jsx)(CustomThemeProvider, { theme: props.theme, children: props.children }) }) }) }) });
};
var useIsWalletModalOpen = () => {
  return (0, import_react.useContext)(WalletModalOpen);
};
var useSetIsWalletModalOpen = () => {
  const context = (0, import_react.useContext)(SetWalletModalOpen);
  if (context === void 0) {
    throw new Error("useSetWalletModalOpen must be used within a ThirdwebProvider");
  }
  return context;
};
function useSetSelectionData() {
  return (0, import_react.useContext)(SetSelectionUIDataCtx);
}
function useSelectionData() {
  return (0, import_react.useContext)(SelectionUIDataCtx);
}

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/useInAppWalletLocale.js
var import_react2 = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/locale/getConnectLocale.js
async function getInAppWalletLocale(localeId) {
  switch (localeId) {
    case "es_ES":
      return (await import("./es-2SWJ4NUD.js")).default;
    case "ja_JP":
      return (await import("./ja-A5DGCLGQ.js")).default;
    case "tl_PH":
      return (await import("./tl-GJQZSVN6.js")).default;
    default:
      return (await import("./en-IK7V4ETS.js")).default;
  }
}

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/useInAppWalletLocale.js
function useInAppWalletLocale(localeId) {
  const [locale, setLocale] = (0, import_react2.useState)(void 0);
  (0, import_react2.useEffect)(() => {
    getInAppWalletLocale(localeId).then((l) => {
      setLocale(l);
    });
  }, [localeId]);
  return locale;
}

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/ConnectWalletSocialOptions.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var import_react5 = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/wallets/ecosystem/get-ecosystem-wallet-auth-options.js
async function getEcosystemWalletAuthOptions(walletId) {
  const res = await fetch(`${getThirdwebBaseUrl("inAppWallet")}/api/2024-05-05/ecosystem-wallet`, {
    headers: {
      "x-ecosystem-id": walletId
    }
  });
  const data = await res.json();
  if (!data || data.code === "UNAUTHORIZED") {
    throw new Error(data.message || `Could not find ecosystem wallet with id ${walletId}, please check your ecosystem wallet configuration.`);
  }
  return data.authOptions ?? void 0;
}

// node_modules/thirdweb/dist/esm/react/web/ui/ConnectWallet/WalletTypeRowButton.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
function WalletTypeRowButton(props) {
  return (0, import_jsx_runtime2.jsx)(Button, { fullWidth: true, variant: "outline", style: {
    display: "flex",
    justifyContent: "flex-start",
    padding: spacing.md
  }, onClick: () => {
    props.onClick();
  }, children: (0, import_jsx_runtime2.jsxs)(Container, { flex: "row", gap: "md", center: "y", color: "accentText", children: [(0, import_jsx_runtime2.jsx)(Img, { client: props.client, src: props.icon, width: iconSize.md, height: iconSize.md, loading: "eager", style: {
    borderRadius: radius.md
  } }), (0, import_jsx_runtime2.jsx)(Text, { color: "primaryText", children: props.title })] }) });
}

// node_modules/thirdweb/dist/esm/react/web/ui/components/TextDivider.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var TextDivider = (props) => {
  return (0, import_jsx_runtime3.jsx)(TextDividerEl, { style: {
    paddingBlock: props.py ? spacing[props.py] : 0
  }, children: (0, import_jsx_runtime3.jsxs)("span", { children: [" ", props.text] }) });
};
var TextDividerEl = StyledDiv(() => {
  const theme = useCustomTheme();
  return {
    display: "flex",
    alignItems: "center",
    color: theme.colors.secondaryText,
    fontSize: fontSize.sm,
    "&::before, &::after": {
      content: '""',
      flex: 1,
      borderBottom: `1px solid ${theme.colors.separatorLine}`
    },
    span: {
      margin: "0 16px"
    }
  };
});

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/InputSelectionUI.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_react4 = __toESM(require_react(), 1);

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/CountrySelector.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var import_react3 = __toESM(require_react(), 1);
function CountrySelector({ countryCode, setCountryCode }) {
  const selectRef = (0, import_react3.useRef)(null);
  const { data: supportedCountries } = useQuery({
    queryKey: ["supported-sms-countries"],
    queryFn: async () => {
      const { supportedSmsCountries } = await import("./supported-sms-countries-OB5UVFFZ.js");
      return supportedSmsCountries;
    }
  });
  const supportedCountriesForSms = supportedCountries ?? [
    {
      countryIsoCode: "US",
      countryName: "United States",
      phoneNumberCode: 1
    }
  ];
  return (0, import_jsx_runtime4.jsx)(import_jsx_runtime4.Fragment, { children: (0, import_jsx_runtime4.jsxs)(Select, { ref: selectRef, name: "countries", id: "countries", value: countryCode, onChange: (e) => {
    setCountryCode(e.target.value);
  }, style: {
    paddingLeft: spacing.md,
    paddingRight: "0"
  }, children: [(0, import_jsx_runtime4.jsx)(Option, { style: {
    display: "none"
  }, value: countryCode, children: countryCode }), supportedCountriesForSms.map((country) => {
    return (0, import_jsx_runtime4.jsxs)(Option, { value: `${country.countryIsoCode} +${country.phoneNumberCode}`, children: [country.countryName, " +", country.phoneNumberCode, " "] }, country.countryIsoCode);
  })] }) });
}
var Option = StyledOption(() => {
  const theme = useCustomTheme();
  return {
    color: theme.colors.primaryText,
    background: theme.colors.modalBg,
    transition: "background 0.3s ease",
    "&:hover": {
      background: theme.colors.tertiaryBg
    }
  };
});
var Select = StyledSelect((_) => {
  const theme = useCustomTheme();
  return {
    fontSize: fontSize.sm,
    display: "block",
    padding: spacing.sm,
    boxSizing: "border-box",
    outline: "none",
    border: "none",
    borderRadius: radius.lg,
    color: theme.colors.primaryText,
    WebkitAppearance: "none",
    appearance: "none",
    cursor: "pointer",
    background: "transparent",
    "&::placeholder": {
      color: theme.colors.secondaryText
    },
    "&[disabled]": {
      cursor: "not-allowed"
    },
    minWidth: "0px",
    maxWidth: "90px",
    textOverflow: "ellipsis",
    overflow: "hidden",
    whiteSpace: "nowrap"
  };
});

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/InputSelectionUI.js
function InputSelectionUI(props) {
  const [countryCodeInfo, setCountryCodeInfo] = (0, import_react4.useState)("US +1");
  const [input, setInput] = (0, import_react4.useState)("");
  const [error, setError] = (0, import_react4.useState)();
  const [showError, setShowError] = (0, import_react4.useState)(false);
  const handleSelect = () => {
    setShowError(true);
    if (!input || !!error) {
      return;
    }
    props.onSelect(props.format === "phone" ? `+${countryCodeInfo.split("+")[1]}${input}` : input);
  };
  const renderingError = showError && !!error || !input && !!props.emptyErrorMessage && showError;
  return (0, import_jsx_runtime5.jsxs)("div", { style: {
    width: "100%"
  }, children: [(0, import_jsx_runtime5.jsxs)(InputContainer, { style: {
    position: "relative",
    display: "flex",
    flexDirection: "row"
  }, "data-error": renderingError, children: [props.format === "phone" && (0, import_jsx_runtime5.jsx)(CountrySelector, { countryCode: countryCodeInfo, setCountryCode: setCountryCodeInfo }), (0, import_jsx_runtime5.jsx)(Input, { tabIndex: -1, placeholder: props.placeholder, style: {
    flexGrow: 1,
    padding: `${spacing.md} ${props.format === "phone" ? 0 : spacing.md}`
  }, variant: "transparent", type: props.type, name: props.name, value: input, disabled: props.disabled, onChange: (e) => {
    setInput(e.target.value);
    if (props.errorMessage) {
      setError(props.errorMessage(e.target.value));
    } else {
      setError(void 0);
    }
  }, onKeyDown: (e) => {
    if (e.key === "Enter") {
      handleSelect();
    }
  } }), (0, import_jsx_runtime5.jsx)(IconButton, { onClick: handleSelect, disabled: props.disabled, style: {
    padding: spacing.md,
    borderRadius: `0 ${radius.lg} ${radius.lg} 0`
  }, children: (0, import_jsx_runtime5.jsx)(ArrowRightIcon, { width: iconSize.md, height: iconSize.md }) })] }), showError && error && (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [(0, import_jsx_runtime5.jsx)(Spacer, { y: "xs" }), (0, import_jsx_runtime5.jsx)(Text, { color: "danger", size: "sm", children: error })] }), !(showError && error) && !input && props.emptyErrorMessage && showError && (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [(0, import_jsx_runtime5.jsx)(Spacer, { y: "xs" }), (0, import_jsx_runtime5.jsx)(Text, { color: "danger", size: "sm", children: props.emptyErrorMessage })] })] });
}

// node_modules/thirdweb/dist/esm/react/web/wallets/in-app/validateEmail.js
function validateEmail(str) {
  const emailRegex = /^\S+@\S+\.\S+$/;
  return emailRegex.test(str.replace(/\+/g, ""));
}

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/openOauthSignInWindow.js
function getBodyTitle(authOption) {
  switch (authOption) {
    case "google":
      return "Sign In - Google Accounts";
    default:
      return `Sign In - ${authOption.slice(0, 1).toUpperCase()}${authOption.slice(1)}`;
  }
}
function getWidthAndHeight(authOption) {
  switch (authOption) {
    case "facebook":
      return { width: 715, height: 555 };
    default:
      return { width: 350, height: 500 };
  }
}
function openOauthSignInWindow(authOption, themeObj) {
  const { height, width } = getWidthAndHeight(authOption);
  const top = (window.innerHeight - height) / 2;
  const left = (window.innerWidth - width) / 2;
  const win = window.open("", void 0, `width=${width}, height=${height}, top=${top}, left=${left}`);
  if (win) {
    const title = getBodyTitle(authOption);
    win.document.title = title;
    win.document.body.innerHTML = spinnerWindowHtml;
    win.document.body.style.background = themeObj.colors.modalBg;
    win.document.body.style.color = themeObj.colors.accentText;
  }
  if (win) {
    window.addEventListener("beforeunload", () => {
      win == null ? void 0 : win.close();
    });
  }
  return win;
}
var spinnerWindowHtml = `
<svg class="loader" viewBox="0 0 50 50">
  <circle
    cx="25"
    cy="25"
    r="20"
    fill="none"
    stroke="currentColor"
    stroke-width="4"
  />
</svg>

<style>
  body,
  html {
    height: 100%;
    margin: 0;
    padding: 0;
  }

  body {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .loader {
    width: 50px;
    height: 50px;
    animation: spin 2s linear infinite;
  }

  .loader circle {
    animation: loading 1.5s linear infinite;
  }

  @keyframes loading {
    0% {
      stroke-dasharray: 1, 150;
      stroke-dashoffset: 0;
    }
    50% {
      stroke-dasharray: 90, 150;
      stroke-dashoffset: -35;
    }
    100% {
      stroke-dasharray: 90, 150;
      stroke-dashoffset: -124;
    }
  }

  @keyframes spin {
    100% {
      transform: rotate(360deg);
    }
  }
</style>
`;

// node_modules/thirdweb/dist/esm/react/web/wallets/shared/ConnectWalletSocialOptions.js
var defaultAuthOptions = [
  "email",
  "phone",
  "google",
  "apple",
  "facebook",
  "passkey"
];
var ConnectWalletSocialOptions = (props) => {
  var _a, _b;
  const locale = props.locale;
  const { wallet } = props;
  const setData = useSetSelectionData();
  const themeObj = useCustomTheme();
  const loginMethodsLabel = {
    google: locale.signInWithGoogle,
    facebook: locale.signInWithFacebook,
    apple: locale.signInWithApple
  };
  const { data: ecosystemAuthOptions, isLoading } = useQuery({
    queryKey: ["auth-options", wallet.id],
    queryFn: async () => {
      if (isEcosystemWallet(wallet)) {
        return getEcosystemWalletAuthOptions(wallet.id);
      }
      return null;
    },
    enabled: isEcosystemWallet(wallet),
    retry: false
  });
  const authOptions = isEcosystemWallet(wallet) ? ecosystemAuthOptions ?? defaultAuthOptions : ((_b = (_a = wallet.getConfig()) == null ? void 0 : _a.auth) == null ? void 0 : _b.options) ?? defaultAuthOptions;
  const emailIndex = authOptions.indexOf("email");
  const isEmailEnabled = emailIndex !== -1;
  const phoneIndex = authOptions.indexOf("phone");
  const isPhoneEnabled = phoneIndex !== -1;
  const [manualInputMode, setManualInputMode] = (0, import_react5.useState)(null);
  const inputMode = (0, import_react5.useMemo)(() => {
    if (manualInputMode) {
      return manualInputMode;
    }
    if (isEmailEnabled && isPhoneEnabled) {
      return emailIndex < phoneIndex ? "email" : "phone";
    }
    if (isEmailEnabled) {
      return "email";
    }
    if (isPhoneEnabled) {
      return "phone";
    }
    return "none";
  }, [isEmailEnabled, isPhoneEnabled, emailIndex, phoneIndex, manualInputMode]);
  if (isEcosystemWallet(wallet) && isLoading) {
    return (0, import_jsx_runtime6.jsx)(LoadingScreen, {});
  }
  const passKeyEnabled = authOptions.includes("passkey");
  const placeholder = inputMode === "email" ? locale.emailPlaceholder : locale.phonePlaceholder;
  const emptyErrorMessage = inputMode === "email" ? locale.emailRequired : locale.phoneRequired;
  let type = "text";
  if (inputMode === "email") {
    type = "email";
  } else if (inputMode === "phone") {
    type = "tel";
  }
  const socialLogins = authOptions.filter((x) => x === "google" || x === "apple" || x === "facebook");
  const hasSocialLogins = socialLogins.length > 0;
  const handleSocialLogin = async (strategy) => {
    var _a2;
    try {
      const socialLoginWindow = openOauthSignInWindow(strategy, themeObj);
      if (!socialLoginWindow) {
        throw new Error("Failed to open login window");
      }
      const connectOptions = {
        chain: props.chain,
        client: props.client,
        strategy,
        openedWindow: socialLoginWindow,
        closeOpenedWindow: (openedWindow) => {
          openedWindow.close();
        }
      };
      const connectPromise = isEcosystemWallet(wallet) ? wallet.connect({
        ...connectOptions,
        ecosystem: {
          id: wallet.id,
          partnerId: (_a2 = wallet.getConfig()) == null ? void 0 : _a2.partnerId
        }
      }) : wallet.connect(connectOptions);
      await setLastAuthProvider(strategy, webLocalStorage);
      setData({
        socialLogin: {
          type: strategy,
          connectionPromise: connectPromise
        }
      });
      props.select();
    } catch (e) {
      console.error(`Error sign in with ${strategy}`, e);
    }
  };
  function handlePassKeyLogin() {
    setData({
      passkeyLogin: true
    });
    props.select();
  }
  const showOnlyIcons = socialLogins.length > 1;
  return (0, import_jsx_runtime6.jsxs)(Container, { flex: "column", gap: "md", style: {
    position: "relative"
  }, children: [hasSocialLogins && (0, import_jsx_runtime6.jsx)(Container, { flex: showOnlyIcons ? "row" : "column", center: "x", gap: "sm", style: {
    justifyContent: "space-between"
  }, children: socialLogins.map((loginMethod) => {
    const imgIconSize = showOnlyIcons ? iconSize.lg : iconSize.md;
    return (0, import_jsx_runtime6.jsxs)(SocialButton, { "aria-label": `Login with ${loginMethod}`, "data-variant": showOnlyIcons ? "icon" : "full", variant: "outline", fullWidth: !showOnlyIcons, onClick: () => {
      handleSocialLogin(loginMethod);
    }, children: [(0, import_jsx_runtime6.jsx)(Img, { src: socialIcons[loginMethod], width: imgIconSize, height: imgIconSize, client: props.client }), !showOnlyIcons && loginMethodsLabel[loginMethod]] }, loginMethod);
  }) }), props.size === "wide" && hasSocialLogins && (isEmailEnabled || isPhoneEnabled) && (0, import_jsx_runtime6.jsx)(TextDivider, { text: locale.or }), isEmailEnabled && (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, { children: inputMode === "email" ? (0, import_jsx_runtime6.jsx)(InputSelectionUI, { type, onSelect: (value) => {
    setData({ emailLogin: value });
    props.select();
  }, placeholder, name: "email", errorMessage: (input) => {
    const isValidEmail = validateEmail(input.toLowerCase());
    if (!isValidEmail) {
      return locale.invalidEmail;
    }
    return void 0;
  }, emptyErrorMessage, submitButtonText: locale.submitEmail }) : (0, import_jsx_runtime6.jsx)(WalletTypeRowButton, {
    client: props.client,
    icon: emailIcon,
    onClick: () => {
      setManualInputMode("email");
    },
    // TODO locale
    title: "Email address"
  }) }), isPhoneEnabled && (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, { children: inputMode === "phone" ? (0, import_jsx_runtime6.jsx)(InputSelectionUI, { format: "phone", type, onSelect: (value) => {
    setData({ phoneLogin: value.replace(/[-\(\) ]/g, "") });
    props.select();
  }, placeholder, name: "phone", errorMessage: (_input) => {
    const input = _input.replace(/[-\(\) ]/g, "");
    const isPhone = /^[0-9]+$/.test(input);
    if (!isPhone && isPhoneEnabled) {
      return locale.invalidPhone;
    }
    return void 0;
  }, emptyErrorMessage, submitButtonText: locale.submitEmail }) : (0, import_jsx_runtime6.jsx)(WalletTypeRowButton, {
    client: props.client,
    icon: phoneIcon,
    onClick: () => {
      setManualInputMode("phone");
    },
    // TODO locale
    title: "Phone number"
  }) }), passKeyEnabled && (0, import_jsx_runtime6.jsx)(import_jsx_runtime6.Fragment, { children: (0, import_jsx_runtime6.jsx)(WalletTypeRowButton, {
    client: props.client,
    icon: passkeyIcon,
    onClick: () => {
      handlePassKeyLogin();
    },
    // TODO locale
    title: "Passkey"
  }) })] });
};
var SocialButton = newStyled(Button)({
  "&[data-variant='full']": {
    display: "flex",
    justifyContent: "flex-start",
    padding: spacing.md,
    gap: spacing.md,
    fontSize: fontSize.md,
    fontWeight: 500,
    transition: "background-color 0.2s ease",
    "&:active": {
      boxShadow: "none"
    }
  },
  "&[data-variant='icon']": {
    padding: spacing.sm,
    flexGrow: 1
  }
});

export {
  WalletUIStatesProvider,
  useIsWalletModalOpen,
  useSetIsWalletModalOpen,
  useSetSelectionData,
  useSelectionData,
  InputSelectionUI,
  TextDivider,
  useInAppWalletLocale,
  openOauthSignInWindow,
  WalletTypeRowButton,
  ConnectWalletSocialOptions
};
//# sourceMappingURL=chunk-SGIGYOYS.js.map
