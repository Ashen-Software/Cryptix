{
  "version": 3,
  "sources": ["../../thirdweb/src/react/web/ui/ConnectWallet/Modal/screen.tsx"],
  "sourcesContent": ["\"use client\";\nimport { createContext, useContext, useEffect, useRef, useState } from \"react\";\nimport type { Wallet } from \"../../../../../wallets/interfaces/wallet.js\";\nimport { useActiveAccount } from \"../../../hooks/wallets/useActiveAccount.js\";\nimport { reservedScreens } from \"../constants.js\";\nimport type { WelcomeScreen } from \"../screens/types.js\";\n\ntype Screen = string | Wallet;\n\nexport type ScreenSetup = {\n  screen: Screen;\n  setScreen: (newSreen: Screen) => void;\n  initialScreen: Screen;\n};\n\nexport const ScreenSetupContext = /* @__PURE__ */ createContext<\n  ScreenSetup | undefined\n>(undefined);\n\n/**\n * @internal\n */\nexport function useSetupScreen(props: {\n  wallets: Wallet[];\n  size: \"compact\" | \"wide\";\n  welcomeScreen: WelcomeScreen | undefined;\n}) {\n  let initialScreen: Screen = reservedScreens.main;\n\n  const socialLogin = props.wallets.find(\n    (w) => w.id === \"embedded\" || w.id === \"inApp\",\n  );\n\n  if (props.wallets.length === 1 && props.wallets[0]) {\n    initialScreen = props.wallets[0];\n  } else if (props.size === \"wide\" && !props.welcomeScreen && socialLogin) {\n    initialScreen = socialLogin;\n  }\n\n  const [screen, setScreen] = useState<string | Wallet>(initialScreen);\n  const prevInitialScreen = useRef(initialScreen);\n  const activeAccount = useActiveAccount();\n\n  // when the initial screen changes, reset the screen to the initial screen ( if the modal is closed )\n  useEffect(() => {\n    if (initialScreen !== prevInitialScreen.current) {\n      prevInitialScreen.current = initialScreen;\n      setScreen(initialScreen);\n    }\n  }, [initialScreen]);\n\n  // if on signature screen and suddenly the wallet is disconnected, go back to the main screen\n  useEffect(() => {\n    if (!activeAccount && screen === reservedScreens.signIn) {\n      setScreen(reservedScreens.main);\n    }\n  }, [activeAccount, screen]);\n\n  return {\n    screen,\n    setScreen,\n    initialScreen,\n  };\n}\n\n/**\n * @internal\n */\nexport function useScreenContext() {\n  const ctx = useContext(ScreenSetupContext);\n  if (!ctx) {\n    throw new Error(\n      \"useScreenContext must be used within a <ScreenProvider />\",\n    );\n  }\n  return ctx;\n}\n"],
  "mappings": ";;;;;;;;;;;;AACA,mBAAuE;AAchE,IAAM,yBAAqC,4BAEhD,MAAS;AAKL,SAAU,eAAe,OAI9B;AACC,MAAI,gBAAwB,gBAAgB;AAE5C,QAAM,cAAc,MAAM,QAAQ,KAChC,CAAC,MAAM,EAAE,OAAO,cAAc,EAAE,OAAO,OAAO;AAGhD,MAAI,MAAM,QAAQ,WAAW,KAAK,MAAM,QAAQ,CAAC,GAAG;AAClD,oBAAgB,MAAM,QAAQ,CAAC;EACjC,WAAW,MAAM,SAAS,UAAU,CAAC,MAAM,iBAAiB,aAAa;AACvE,oBAAgB;EAClB;AAEA,QAAM,CAAC,QAAQ,SAAS,QAAI,uBAA0B,aAAa;AACnE,QAAM,wBAAoB,qBAAO,aAAa;AAC9C,QAAM,gBAAgB,iBAAgB;AAGtC,8BAAU,MAAK;AACb,QAAI,kBAAkB,kBAAkB,SAAS;AAC/C,wBAAkB,UAAU;AAC5B,gBAAU,aAAa;IACzB;EACF,GAAG,CAAC,aAAa,CAAC;AAGlB,8BAAU,MAAK;AACb,QAAI,CAAC,iBAAiB,WAAW,gBAAgB,QAAQ;AACvD,gBAAU,gBAAgB,IAAI;IAChC;EACF,GAAG,CAAC,eAAe,MAAM,CAAC;AAE1B,SAAO;IACL;IACA;IACA;;AAEJ;AAKM,SAAU,mBAAgB;AAC9B,QAAM,UAAM,yBAAW,kBAAkB;AACzC,MAAI,CAAC,KAAK;AACR,UAAM,IAAI,MACR,2DAA2D;EAE/D;AACA,SAAO;AACT;",
  "names": []
}
