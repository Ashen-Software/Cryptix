import {
  fetchTokenMetadata,
  parseNFT
} from "./chunk-GV57EYCP.js";
import "./chunk-YRUP5XOX.js";
import "./chunk-ZDQH37F2.js";
import {
  readContract
} from "./chunk-OEOA3HT2.js";
import "./chunk-2I6BQZFD.js";
import "./chunk-3NAETAKT.js";
import "./chunk-LW7EMTNJ.js";
import "./chunk-BSASUUNP.js";
import "./chunk-MQIGPFEC.js";
import "./chunk-3JG4JMZX.js";
import "./chunk-GDDTQ4UI.js";
import "./chunk-WF2UJPJG.js";
import "./chunk-HGWZNQ5H.js";
import "./chunk-TRL57KBW.js";
import "./chunk-NMVKDFRL.js";
import "./chunk-MHFR2GDE.js";
import "./chunk-CVWITOXT.js";
import "./chunk-SHWHM7JY.js";
import "./chunk-EZ4JTQAA.js";
import "./chunk-ZAXCNZIK.js";
import "./chunk-Z2F5LG57.js";
import "./chunk-HK3KI3RB.js";
import "./chunk-EWAXOTDC.js";
import "./chunk-TEQAYQEZ.js";
import "./chunk-SEVZ5PBP.js";

// node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IERC1155/read/totalSupply.js
var FN_SELECTOR = "0xbd85b039";
var FN_INPUTS = [
  {
    type: "uint256",
    name: "id"
  }
];
var FN_OUTPUTS = [
  {
    type: "uint256"
  }
];
async function totalSupply(options) {
  return readContract({
    contract: options.contract,
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    params: [options.id]
  });
}

// node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IERC1155/read/uri.js
var FN_SELECTOR2 = "0x0e89341c";
var FN_INPUTS2 = [
  {
    type: "uint256",
    name: "tokenId"
  }
];
var FN_OUTPUTS2 = [
  {
    type: "string"
  }
];
async function uri(options) {
  return readContract({
    contract: options.contract,
    method: [FN_SELECTOR2, FN_INPUTS2, FN_OUTPUTS2],
    params: [options.tokenId]
  });
}

// node_modules/thirdweb/dist/esm/extensions/erc1155/read/getNFT.js
async function getNFT(options) {
  const [tokenUri, supply] = await Promise.all([
    uri({
      contract: options.contract,
      tokenId: options.tokenId
    }),
    totalSupply({
      contract: options.contract,
      id: options.tokenId
      // in cases where the supply is not available -> fall back to 0
    }).catch(() => 0n)
  ]);
  return parseNFT(await fetchTokenMetadata({
    client: options.contract.client,
    tokenId: options.tokenId,
    tokenUri
  }).catch(() => ({
    id: options.tokenId,
    type: "ERC1155",
    uri: tokenUri
  })), {
    tokenId: options.tokenId,
    tokenUri,
    type: "ERC1155",
    owner: null,
    supply
  });
}
export {
  getNFT
};
//# sourceMappingURL=getNFT-7YAJ3GMR.js.map
