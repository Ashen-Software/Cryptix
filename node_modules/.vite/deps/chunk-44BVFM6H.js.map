{
  "version": 3,
  "sources": ["../../thirdweb/src/wallets/wallet-connect/receiver/utils.ts"],
  "sourcesContent": ["import { type Address, checksumAddress } from \"../../../utils/address.js\";\nimport type { Account } from \"../../interfaces/wallet.js\";\n\n/**\n * @internal\n */\nexport function validateAccountAddress(account: Account, address: Address) {\n  if (checksumAddress(account.address) !== checksumAddress(address)) {\n    throw new Error(\n      `Failed to validate account address (${account.address}), differs from ${address}`,\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport function parseEip155ChainId(chainId: string): number {\n  const chainIdParts = chainId.split(\":\");\n  const chainIdAsNumber = Number.parseInt(chainIdParts[1] ?? \"0\");\n  if (\n    chainIdParts.length !== 2 ||\n    chainIdParts[0] !== \"eip155\" ||\n    chainIdAsNumber === 0 ||\n    !chainIdAsNumber\n  ) {\n    throw new Error(\n      `Invalid chainId ${chainId}, should have the format 'eip155:1'`,\n    );\n  }\n  return chainIdAsNumber;\n}\n"],
  "mappings": ";;;;;AAMM,SAAU,uBAAuB,SAAkB,SAAgB;AACvE,MAAI,gBAAgB,QAAQ,OAAO,MAAM,gBAAgB,OAAO,GAAG;AACjE,UAAM,IAAI,MACR,uCAAuC,QAAQ,OAAO,mBAAmB,OAAO,EAAE;EAEtF;AACF;AAKM,SAAU,mBAAmB,SAAe;AAChD,QAAM,eAAe,QAAQ,MAAM,GAAG;AACtC,QAAM,kBAAkB,OAAO,SAAS,aAAa,CAAC,KAAK,GAAG;AAC9D,MACE,aAAa,WAAW,KACxB,aAAa,CAAC,MAAM,YACpB,oBAAoB,KACpB,CAAC,iBACD;AACA,UAAM,IAAI,MACR,mBAAmB,OAAO,qCAAqC;EAEnE;AACA,SAAO;AACT;",
  "names": []
}
