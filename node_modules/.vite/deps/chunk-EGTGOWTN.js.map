{
  "version": 3,
  "sources": ["../../thirdweb/src/react/core/hooks/wallets/useActiveWallet.ts", "../../thirdweb/src/react/web/hooks/wallets/useActiveWallet.ts", "../../thirdweb/src/react/core/hooks/others/useWalletBalance.ts"],
  "sourcesContent": ["import { useSyncExternalStore } from \"react\";\nimport type { ConnectionManager } from \"../../../../wallets/manager/index.js\";\n\nexport function useActiveWalletCore(manager: ConnectionManager) {\n  const store = manager.activeWalletStore;\n  return useSyncExternalStore(store.subscribe, store.getValue, store.getValue);\n}\n", "import { useActiveWalletCore } from \"../../../core/hooks/wallets/useActiveWallet.js\";\nimport { connectionManager } from \"../../index.js\";\n\n/**\n * A hook that returns the active wallet\n * @returns The active `Wallet` or `undefined` if no active wallet is set.\n * @example\n * ```jsx\n * import { useActiveWallet } from \"thirdweb/react\";\n *\n * const wallet = useActiveWallet();\n * ```\n * @walletConnection\n */\nexport function useActiveWallet() {\n  return useActiveWalletCore(connectionManager);\n}\n", "import { queryOptions, useQuery } from \"@tanstack/react-query\";\nimport {\n  type GetWalletBalanceOptions,\n  getWalletBalance,\n} from \"../../../../wallets/utils/getWalletBalance.js\";\n\n// NOTE: Do not use useConnectUI here - because this hook is also used outside of Connect UI context\n\n/**\n * Fetch the balance of a wallet for a specific token.\n * @note Leave `tokenAddress` undefined to fetch the native token balance.\n * @param options {@link GetWalletBalanceOptions} - The options for fetching the wallet balance.\n * @param options.chain - The chain to fetch the wallet balance from.\n * @param options.address - The address of the wallet to fetch the balance from.\n * @param options.client - The client to use to fetch the wallet balance.\n * @param [options.tokenAddress] - The address of the token to fetch the balance for.\n * @returns {@link GetWalletBalanceResult} The result of the query.\n *\n * @example\n * ```ts\n * import { useWalletBalance } from \"thirdweb/react\";\n *\n * const { data, isLoading, isError } = useWalletBalance({ chain, address, client, tokenAddress });\n * ```\n * @wallet\n */\nexport function useWalletBalance(options: Partial<GetWalletBalanceOptions>) {\n  const { chain, address, tokenAddress, client } = options;\n  const query = queryOptions({\n    queryKey: [\n      \"walletBalance\",\n      chain?.id || -1,\n      address || \"0x0\",\n      { tokenAddress },\n    ] as const,\n    queryFn: async () => {\n      if (!chain) {\n        throw new Error(\"chain is required\");\n      }\n      if (!client) {\n        throw new Error(\"client is required\");\n      }\n      if (!address) {\n        throw new Error(\"address is required\");\n      }\n      return getWalletBalance({ chain, client, address, tokenAddress });\n    },\n    enabled: !!chain && !!client && !!address,\n  });\n  return useQuery(query);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAAA,mBAAqC;AAG/B,SAAU,oBAAoB,SAA0B;AAC5D,QAAM,QAAQ,QAAQ;AACtB,aAAO,mCAAqB,MAAM,WAAW,MAAM,UAAU,MAAM,QAAQ;AAC7E;;;ACQM,SAAU,kBAAe;AAC7B,SAAO,oBAAoB,iBAAiB;AAC9C;;;ACUM,SAAU,iBAAiB,SAAyC;AACxE,QAAM,EAAE,OAAO,SAAS,cAAc,OAAM,IAAK;AACjD,QAAM,QAAQ,aAAa;IACzB,UAAU;MACR;OACA,+BAAO,OAAM;MACb,WAAW;MACX,EAAE,aAAY;;IAEhB,SAAS,YAAW;AAClB,UAAI,CAAC,OAAO;AACV,cAAM,IAAI,MAAM,mBAAmB;MACrC;AACA,UAAI,CAAC,QAAQ;AACX,cAAM,IAAI,MAAM,oBAAoB;MACtC;AACA,UAAI,CAAC,SAAS;AACZ,cAAM,IAAI,MAAM,qBAAqB;MACvC;AACA,aAAO,iBAAiB,EAAE,OAAO,QAAQ,SAAS,aAAY,CAAE;IAClE;IACA,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,CAAC;GACnC;AACD,SAAO,SAAS,KAAK;AACvB;",
  "names": []
}
