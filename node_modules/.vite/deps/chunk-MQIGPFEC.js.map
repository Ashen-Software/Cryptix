{
  "version": 3,
  "sources": ["../../thirdweb/src/utils/encoding/to-bytes.ts", "../../thirdweb/src/utils/hashing/keccak256.ts"],
  "sourcesContent": ["import { cachedTextEncoder } from \"../text-encoder.js\";\nimport { assertSize } from \"./helpers/assert-size.js\";\nimport { charCodeToBase16 } from \"./helpers/charcode-to-base-16.js\";\nimport { type Hex, isHex } from \"./helpers/is-hex.js\";\nimport { type NumberToHexOpts, numberToHex, padHex } from \"./hex.js\";\n\ntype PadOptions = {\n  dir?: \"left\" | \"right\";\n  size?: number | null;\n};\n\nfunction padBytes(bytes: Uint8Array, { dir, size = 32 }: PadOptions = {}) {\n  if (size === null) {\n    return bytes;\n  }\n  if (bytes.length > size) {\n    throw new Error(`Size overflow: ${bytes.length} > ${size}`);\n  }\n  const paddedBytes = new Uint8Array(size);\n  for (let i = 0; i < size; i++) {\n    const padEnd = dir === \"right\";\n    paddedBytes[padEnd ? i : size - i - 1] =\n      // biome-ignore lint/style/noNonNullAssertion: we know its there\n      bytes[padEnd ? i : bytes.length - i - 1]!;\n  }\n  return paddedBytes;\n}\n\nexport type ToBytesParameters = {\n  /** Size of the output bytes. */\n  size?: number;\n};\n\n/**\n * Converts a value to an array of bytes.\n * @param value - The value to convert.\n * @param opts - Optional parameters for the conversion.\n * @returns The array of bytes representing the value.\n * @example\n * ```ts\n * import { toBytes } from \"thirdweb/utils\";\n * const bytes = toBytes(\"0x1a4\");\n * console.log(bytes); // Uint8Array(2) [ 1, 164 ]\n * ```\n * @utils\n */\nexport function toBytes(\n  value: string | bigint | number | boolean | Hex,\n  opts: ToBytesParameters = {},\n): Uint8Array {\n  switch (typeof value) {\n    case \"number\":\n    case \"bigint\":\n      return numberToBytes(value, opts);\n    case \"boolean\":\n      return boolToBytes(value, opts);\n    default:\n      if (isHex(value)) {\n        return hexToBytes(value, opts);\n      }\n      return stringToBytes(value, opts);\n  }\n}\n\nexport type BoolToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number;\n};\n\n/**\n * Converts a boolean value to a Uint8Array of bytes.\n * @param value - The boolean value to convert.\n * @param opts - Optional parameters for the conversion.\n * @returns The Uint8Array of bytes representing the boolean value.\n * @example\n * ```ts\n * import { boolToBytes } from \"thirdweb/utils\";\n * const bytes = boolToBytes(true);\n * console.log(bytes); // Uint8Array(1) [ 1 ]\n * ```\n * @utils\n */\nexport function boolToBytes(value: boolean, opts: BoolToBytesOpts = {}) {\n  const bytes = new Uint8Array(1);\n  bytes[0] = Number(value);\n  if (typeof opts.size === \"number\") {\n    assertSize(bytes, { size: opts.size });\n    return padBytes(bytes, { size: opts.size });\n  }\n  return bytes;\n}\n\nexport type HexToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number;\n};\n\n/**\n * Converts a hexadecimal string to a Uint8Array of bytes.\n * @param hex_ The hexadecimal string to convert.\n * @param opts Options for converting the hexadecimal string.\n * @returns The Uint8Array of bytes.\n * @throws Error if the byte sequence is invalid.\n * @example\n * ```ts\n * import { hexToBytes } from \"thirdweb/utils\";\n * const bytes = hexToBytes(\"0x1a4\");\n * console.log(bytes); // Uint8Array(2) [ 1, 164 ]\n * ```\n * @utils\n */\nexport function hexToBytes(hex_: Hex, opts: HexToBytesOpts = {}): Uint8Array {\n  let hex = hex_;\n  if (opts.size) {\n    assertSize(hex, { size: opts.size });\n    hex = padHex(hex, { dir: \"right\", size: opts.size });\n  }\n\n  let hexString = hex.slice(2) as string;\n  if (hexString.length % 2) {\n    hexString = `0${hexString}`;\n  }\n\n  const length = hexString.length / 2;\n  const bytes = new Uint8Array(length);\n  for (let index = 0, j = 0; index < length; index++) {\n    const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++));\n    const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++));\n    if (nibbleLeft === undefined || nibbleRight === undefined) {\n      throw new Error(\n        `Invalid byte sequence (\"${hexString[j - 2]}${\n          hexString[j - 1]\n        }\" in \"${hexString}\").`,\n      );\n    }\n    bytes[index] = nibbleLeft * 16 + nibbleRight;\n  }\n  return bytes;\n}\n\n/**\n * Converts a number to bytes.\n * @param value - The number to convert.\n * @param opts - Options for converting the number to hex.\n * @returns The bytes representation of the number.\n * @example\n * ```ts\n * import { numberToBytes } from \"thirdweb/utils\";\n * const bytes = numberToBytes(420);\n * console.log(bytes); // Uint8Array(2) [ 1, 164 ]\n * ```\n * @utils\n */\nexport function numberToBytes(value: bigint | number, opts?: NumberToHexOpts) {\n  const hex = numberToHex(value, opts);\n  return hexToBytes(hex);\n}\n\nexport type StringToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number;\n};\n\n/**\n * Converts a string to an array of bytes.\n * @param value - The string to convert.\n * @param opts - Optional parameters for the conversion.\n * @returns The array of bytes representing the string.\n * @example\n * ```ts\n * import { stringToBytes } from \"thirdweb/utils\";\n * const bytes = stringToBytes(\"Hello, world!\");\n * console.log(bytes); // Uint8Array(13) [ 72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33 ]\n * ```\n * @utils\n */\nexport function stringToBytes(\n  value: string,\n  opts: StringToBytesOpts = {},\n): Uint8Array {\n  const bytes = cachedTextEncoder().encode(value);\n  if (typeof opts.size === \"number\") {\n    assertSize(bytes, { size: opts.size });\n    return padBytes(bytes, { dir: \"right\", size: opts.size });\n  }\n  return bytes;\n}\n", "import { keccak_256 } from \"@noble/hashes/sha3\";\nimport {\n  type Hex,\n  hexToUint8Array,\n  isHex,\n  uint8ArrayToHex,\n} from \"../encoding/hex.js\";\n\ntype To = \"hex\" | \"bytes\";\n\nexport type Keccak256Hash<TTo extends To> =\n  | (TTo extends \"bytes\" ? Uint8Array : never)\n  | (TTo extends \"hex\" ? Hex : never);\n\n/**\n * Calculates the Keccak-256 hash of the given value.\n * @param value - The value to hash, either as a hexadecimal string or a Uint8Array.\n * @param to - The desired output format of the hash (optional). Defaults to 'hex'.\n * @returns The Keccak-256 hash of the value in the specified format.\n * @example\n * ```ts\n * import { keccak256 } from \"thirdweb/utils\";\n * const hash = keccak256(\"0x1234\");\n * ```\n * @utils\n */\nexport function keccak256<TTo extends To = \"hex\">(\n  value: Hex | Uint8Array,\n  to?: TTo,\n): Keccak256Hash<TTo> {\n  const bytes = keccak_256(\n    isHex(value, { strict: false }) ? hexToUint8Array(value) : value,\n  );\n  if (to === \"bytes\") {\n    return bytes as Keccak256Hash<TTo>;\n  }\n  // default fall through to hex\n  return uint8ArrayToHex(bytes) as Keccak256Hash<TTo>;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAWA,SAAS,SAAS,OAAmB,EAAE,KAAK,OAAO,GAAE,IAAiB,CAAA,GAAE;AACtE,MAAI,SAAS,MAAM;AACjB,WAAO;EACT;AACA,MAAI,MAAM,SAAS,MAAM;AACvB,UAAM,IAAI,MAAM,kBAAkB,MAAM,MAAM,MAAM,IAAI,EAAE;EAC5D;AACA,QAAM,cAAc,IAAI,WAAW,IAAI;AACvC,WAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC7B,UAAM,SAAS,QAAQ;AACvB,gBAAY,SAAS,IAAI,OAAO,IAAI,CAAC;IAEnC,MAAM,SAAS,IAAI,MAAM,SAAS,IAAI,CAAC;EAC3C;AACA,SAAO;AACT;AAoBM,SAAU,QACd,OACA,OAA0B,CAAA,GAAE;AAE5B,UAAQ,OAAO,OAAO;IACpB,KAAK;IACL,KAAK;AACH,aAAO,cAAc,OAAO,IAAI;IAClC,KAAK;AACH,aAAO,YAAY,OAAO,IAAI;IAChC;AACE,UAAI,MAAM,KAAK,GAAG;AAChB,eAAO,WAAW,OAAO,IAAI;MAC/B;AACA,aAAO,cAAc,OAAO,IAAI;EACpC;AACF;AAoBM,SAAU,YAAY,OAAgB,OAAwB,CAAA,GAAE;AACpE,QAAM,QAAQ,IAAI,WAAW,CAAC;AAC9B,QAAM,CAAC,IAAI,OAAO,KAAK;AACvB,MAAI,OAAO,KAAK,SAAS,UAAU;AACjC,eAAW,OAAO,EAAE,MAAM,KAAK,KAAI,CAAE;AACrC,WAAO,SAAS,OAAO,EAAE,MAAM,KAAK,KAAI,CAAE;EAC5C;AACA,SAAO;AACT;AAqBM,SAAU,WAAW,MAAW,OAAuB,CAAA,GAAE;AAC7D,MAAI,MAAM;AACV,MAAI,KAAK,MAAM;AACb,eAAW,KAAK,EAAE,MAAM,KAAK,KAAI,CAAE;AACnC,UAAM,OAAO,KAAK,EAAE,KAAK,SAAS,MAAM,KAAK,KAAI,CAAE;EACrD;AAEA,MAAI,YAAY,IAAI,MAAM,CAAC;AAC3B,MAAI,UAAU,SAAS,GAAG;AACxB,gBAAY,IAAI,SAAS;EAC3B;AAEA,QAAM,SAAS,UAAU,SAAS;AAClC,QAAM,QAAQ,IAAI,WAAW,MAAM;AACnC,WAAS,QAAQ,GAAG,IAAI,GAAG,QAAQ,QAAQ,SAAS;AAClD,UAAM,aAAa,iBAAiB,UAAU,WAAW,GAAG,CAAC;AAC7D,UAAM,cAAc,iBAAiB,UAAU,WAAW,GAAG,CAAC;AAC9D,QAAI,eAAe,UAAa,gBAAgB,QAAW;AACzD,YAAM,IAAI,MACR,2BAA2B,UAAU,IAAI,CAAC,CAAC,GACzC,UAAU,IAAI,CAAC,CACjB,SAAS,SAAS,KAAK;IAE3B;AACA,UAAM,KAAK,IAAI,aAAa,KAAK;EACnC;AACA,SAAO;AACT;AAeM,SAAU,cAAc,OAAwB,MAAsB;AAC1E,QAAM,MAAM,YAAY,OAAO,IAAI;AACnC,SAAO,WAAW,GAAG;AACvB;AAoBM,SAAU,cACd,OACA,OAA0B,CAAA,GAAE;AAE5B,QAAM,QAAQ,kBAAiB,EAAG,OAAO,KAAK;AAC9C,MAAI,OAAO,KAAK,SAAS,UAAU;AACjC,eAAW,OAAO,EAAE,MAAM,KAAK,KAAI,CAAE;AACrC,WAAO,SAAS,OAAO,EAAE,KAAK,SAAS,MAAM,KAAK,KAAI,CAAE;EAC1D;AACA,SAAO;AACT;;;AChKM,SAAU,UACd,OACA,IAAQ;AAER,QAAM,QAAQ,WACZ,MAAM,OAAO,EAAE,QAAQ,MAAK,CAAE,IAAI,gBAAgB,KAAK,IAAI,KAAK;AAElE,MAAI,OAAO,SAAS;AAClB,WAAO;EACT;AAEA,SAAO,gBAAgB,KAAK;AAC9B;",
  "names": []
}
