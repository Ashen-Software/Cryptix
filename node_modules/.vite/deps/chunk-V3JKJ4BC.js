import {
  isMobile
} from "./chunk-7JYW3NMA.js";
import {
  webLocalStorage
} from "./chunk-57DFWRZ3.js";
import {
  isEcosystemWallet
} from "./chunk-5R32MHFT.js";
import {
  createInAppWallet,
  getOrCreateInAppWalletConnector
} from "./chunk-D6UC7WRW.js";
import {
  smartWallet
} from "./chunk-ZX3P6DTN.js";
import {
  createWalletEmitter,
  trackConnect
} from "./chunk-UTSWADTJ.js";
import {
  getCoinbaseWebProvider
} from "./chunk-VDD3Y6TE.js";
import {
  COINBASE
} from "./chunk-LZH3KM55.js";

// node_modules/thirdweb/dist/esm/wallets/in-app/core/wallet/ecosystem-core.js
function createEcosystemWallet(args) {
  const { id, createOptions, connectorFactory } = args;
  const emitter = createWalletEmitter();
  let account = void 0;
  let chain = void 0;
  let client;
  return {
    id,
    subscribe: emitter.subscribe,
    getChain: () => chain,
    getConfig: () => createOptions,
    getAccount: () => account,
    autoConnect: async (options) => {
      const { autoConnectInAppWallet } = await import("./wallet-QR7U5XFP.js");
      const connector = await getOrCreateInAppWalletConnector(options.client, connectorFactory, {
        id,
        partnerId: createOptions == null ? void 0 : createOptions.partnerId
      });
      const [connectedAccount, connectedChain] = await autoConnectInAppWallet(options, createOptions, connector);
      client = options.client;
      account = connectedAccount;
      chain = connectedChain;
      trackConnect({
        client: options.client,
        walletType: id,
        walletAddress: account.address
      });
      return account;
    },
    connect: async (options) => {
      const { connectInAppWallet } = await import("./wallet-QR7U5XFP.js");
      const connector = await getOrCreateInAppWalletConnector(options.client, connectorFactory, {
        id,
        partnerId: createOptions == null ? void 0 : createOptions.partnerId
      });
      const [connectedAccount, connectedChain] = await connectInAppWallet(options, createOptions, connector);
      client = options.client;
      account = connectedAccount;
      chain = connectedChain;
      trackConnect({
        client: options.client,
        walletType: id,
        walletAddress: account.address
      });
      return account;
    },
    disconnect: async () => {
      if (client) {
        const connector = await getOrCreateInAppWalletConnector(client, connectorFactory, {
          id,
          partnerId: createOptions == null ? void 0 : createOptions.partnerId
        });
        const result = await connector.logout();
        if (!result.success) {
          throw new Error("Failed to logout");
        }
      }
      account = void 0;
      chain = void 0;
      emitter.emit("disconnect", void 0);
    },
    switchChain: async (newChain) => {
      chain = newChain;
      emitter.emit("chainChanged", newChain);
    }
  };
}

// node_modules/thirdweb/dist/esm/wallets/in-app/web/ecosystem.js
function ecosystemWallet(...args) {
  const [ecosystemId, createOptions] = args;
  return createEcosystemWallet({
    id: ecosystemId,
    createOptions,
    connectorFactory: async (client) => {
      const { InAppWebConnector } = await import("./web-connector-Q2GYLPM3.js");
      return new InAppWebConnector({
        client,
        ecosystem: {
          id: ecosystemId,
          partnerId: createOptions == null ? void 0 : createOptions.partnerId
        }
      });
    }
  });
}

// node_modules/thirdweb/dist/esm/wallets/in-app/web/in-app.js
function inAppWallet(createOptions) {
  return createInAppWallet({
    createOptions,
    connectorFactory: async (client) => {
      const { InAppWebConnector } = await import("./web-connector-Q2GYLPM3.js");
      return new InAppWebConnector({
        client
      });
    }
  });
}

// node_modules/thirdweb/dist/esm/utils/web/openWindow.js
function openWindow(uri) {
  const isInsideIframe = window !== window.top;
  if (isInsideIframe) {
    window.open(uri);
  } else {
    if (uri.startsWith("http")) {
      const link = document.createElement("a");
      link.href = uri;
      link.target = "_blank";
      link.rel = "noreferrer noopener";
      link.click();
    } else {
      window.location.href = uri;
    }
  }
}

// node_modules/thirdweb/dist/esm/wallets/coinbase/coinbase-wallet.js
function coinbaseWalletSDK(args) {
  const { createOptions } = args;
  const emitter = createWalletEmitter();
  let account = void 0;
  let chain = void 0;
  function reset() {
    account = void 0;
    chain = void 0;
  }
  let handleDisconnect = async () => {
  };
  let handleSwitchChain = async (newChain) => {
    chain = newChain;
  };
  const unsubscribeChainChanged = emitter.subscribe("chainChanged", (newChain) => {
    chain = newChain;
  });
  const unsubscribeDisconnect = emitter.subscribe("disconnect", () => {
    reset();
    unsubscribeChainChanged();
    unsubscribeDisconnect();
  });
  emitter.subscribe("accountChanged", (_account) => {
    account = _account;
  });
  return {
    id: COINBASE,
    subscribe: emitter.subscribe,
    getChain: () => chain,
    getConfig: () => createOptions,
    getAccount: () => account,
    autoConnect: async (options) => {
      const { autoConnectCoinbaseWalletSDK } = await import("./coinbaseWebSDK-U2ELSGPW.js");
      const provider = await args.providerFactory();
      const [connectedAccount, connectedChain, doDisconnect, doSwitchChain] = await autoConnectCoinbaseWalletSDK(options, emitter, provider);
      account = connectedAccount;
      chain = connectedChain;
      handleDisconnect = doDisconnect;
      handleSwitchChain = doSwitchChain;
      trackConnect({
        client: options.client,
        walletType: COINBASE,
        walletAddress: account.address
      });
      return account;
    },
    connect: async (options) => {
      const { connectCoinbaseWalletSDK } = await import("./coinbaseWebSDK-U2ELSGPW.js");
      const provider = await args.providerFactory();
      const [connectedAccount, connectedChain, doDisconnect, doSwitchChain] = await connectCoinbaseWalletSDK(options, emitter, provider);
      account = connectedAccount;
      chain = connectedChain;
      handleDisconnect = doDisconnect;
      handleSwitchChain = doSwitchChain;
      trackConnect({
        client: options.client,
        walletType: COINBASE,
        walletAddress: account.address
      });
      return account;
    },
    disconnect: async () => {
      reset();
      await handleDisconnect();
    },
    switchChain: async (newChain) => {
      await handleSwitchChain(newChain);
    },
    onConnectRequested: async () => {
      var _a;
      if (args.onConnectRequested) {
        const provider = await args.providerFactory();
        return (_a = args.onConnectRequested) == null ? void 0 : _a.call(args, provider);
      }
    }
  };
}

// node_modules/thirdweb/dist/esm/wallets/create-wallet.js
function createWallet(...args) {
  const [id, creationOptions] = args;
  switch (true) {
    case id === "smart": {
      return smartWallet(creationOptions);
    }
    case (id === "embedded" || id === "inApp"): {
      return inAppWallet(creationOptions);
    }
    case id === COINBASE: {
      const options = creationOptions;
      return coinbaseWalletSDK({
        createOptions: options,
        providerFactory: () => getCoinbaseWebProvider(options),
        onConnectRequested: async (provider) => {
          const { showCoinbasePopup } = await import("./utils-4HBJANFI.js");
          return showCoinbasePopup(provider);
        }
      });
    }
    case isEcosystemWallet(id):
      return ecosystemWallet(...args);
    default: {
      let reset = function() {
        account = void 0;
        chain = void 0;
      };
      const emitter = createWalletEmitter();
      let account = void 0;
      let chain = void 0;
      const unsubscribeChain = emitter.subscribe("chainChanged", (newChain) => {
        chain = newChain;
      });
      let handleDisconnect = async () => {
      };
      const unsubscribeDisconnect = emitter.subscribe("disconnect", () => {
        reset();
        unsubscribeChain();
        unsubscribeDisconnect();
      });
      emitter.subscribe("accountChanged", (_account) => {
        account = _account;
      });
      let handleSwitchChain = async () => {
        throw new Error("Not implemented yet");
      };
      const sessionHandler = isMobile() ? (uri) => openWindow(uri) : void 0;
      const wallet = {
        id,
        subscribe: emitter.subscribe,
        getConfig: () => args[1],
        getChain: () => chain,
        getAccount: () => account,
        autoConnect: async (options) => {
          const { injectedProvider } = await import("./mipdStore-6OS6ARXR.js");
          if (id !== "walletConnect" && injectedProvider(id)) {
            const { autoConnectInjectedWallet } = await import("./injected-AOQKHSEP.js");
            const [connectedAccount, connectedChain, doDisconnect, doSwitchChain] = await autoConnectInjectedWallet(id, emitter, options.chain);
            account = connectedAccount;
            chain = connectedChain;
            handleDisconnect = doDisconnect;
            handleSwitchChain = doSwitchChain;
            trackConnect({
              client: options.client,
              walletType: id,
              walletAddress: account.address
            });
            return account;
          }
          if (options && "client" in options) {
            const { autoConnectWC } = await import("./controller-TEUQBJA3.js");
            const [connectedAccount, connectedChain, doDisconnect, doSwitchChain] = await autoConnectWC(options, emitter, wallet.id, webLocalStorage, sessionHandler);
            account = connectedAccount;
            chain = connectedChain;
            handleDisconnect = doDisconnect;
            handleSwitchChain = doSwitchChain;
            trackConnect({
              client: options.client,
              walletType: id,
              walletAddress: account.address
            });
            return account;
          }
          throw new Error("Failed to auto connect");
        },
        connect: async (options) => {
          async function wcConnect(wcOptions) {
            const { connectWC } = await import("./controller-TEUQBJA3.js");
            const [connectedAccount, connectedChain, doDisconnect, doSwitchChain] = await connectWC(wcOptions, emitter, wallet.id, webLocalStorage, sessionHandler);
            account = connectedAccount;
            chain = connectedChain;
            handleDisconnect = doDisconnect;
            handleSwitchChain = doSwitchChain;
            trackConnect({
              client: wcOptions.client,
              walletType: id,
              walletAddress: account.address
            });
            return account;
          }
          if (id === "walletConnect") {
            const { client, chain: _chain, ...walletConnectOptions } = options;
            return wcConnect({
              client,
              chain: _chain,
              walletConnect: {
                ...walletConnectOptions
              }
            });
          }
          const forceWalletConnectOption = options && "walletConnect" in options;
          const { injectedProvider } = await import("./mipdStore-6OS6ARXR.js");
          if (injectedProvider(id) && !forceWalletConnectOption) {
            const { connectInjectedWallet } = await import("./injected-AOQKHSEP.js");
            const [connectedAccount, connectedChain, doDisconnect, doSwitchChain] = await connectInjectedWallet(id, options, emitter);
            account = connectedAccount;
            chain = connectedChain;
            handleDisconnect = doDisconnect;
            handleSwitchChain = doSwitchChain;
            trackConnect({
              client: options.client,
              walletType: id,
              walletAddress: account.address
            });
            return account;
          }
          if (options && "client" in options) {
            return wcConnect(options);
          }
          throw new Error("Failed to connect");
        },
        // these get overridden in connect and autoConnect
        disconnect: async () => {
          reset();
          await handleDisconnect();
        },
        switchChain: (c) => handleSwitchChain(c)
      };
      return wallet;
    }
  }
}
function walletConnect() {
  return createWallet("walletConnect");
}

export {
  openWindow,
  ecosystemWallet,
  inAppWallet,
  createWallet,
  walletConnect
};
//# sourceMappingURL=chunk-V3JKJ4BC.js.map
