{
  "version": 3,
  "sources": ["../../thirdweb/src/transaction/actions/send-transaction.ts"],
  "sourcesContent": ["import type { Account } from \"../../wallets/interfaces/wallet.js\";\nimport type { PreparedTransaction } from \"../prepare-transaction.js\";\nimport { addTransactionToStore } from \"../transaction-store.js\";\nimport type { GaslessOptions } from \"./gasless/types.js\";\nimport { toSerializableTransaction } from \"./to-serializable-transaction.js\";\nimport type { WaitForReceiptOptions } from \"./wait-for-tx-receipt.js\";\n\nexport type SendTransactionOptions = {\n  account: Account;\n  // TODO: update this to `Transaction<\"prepared\">` once the type is available to ensure only prepared transactions are accepted\n  // biome-ignore lint/suspicious/noExplicitAny: library function that accepts any prepared transaction type\n  transaction: PreparedTransaction<any>;\n  gasless?: GaslessOptions;\n};\n\n/**\n * Sends a transaction using the provided wallet.\n * @param options - The options for sending the transaction.\n * @returns A promise that resolves to the transaction hash.\n * @throws An error if the wallet is not connected.\n * @transaction\n * @example\n * ```ts\n * import { sendTransaction } from \"thirdweb\";\n *\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction\n * });\n * ```\n */\nexport async function sendTransaction(\n  options: SendTransactionOptions,\n): Promise<WaitForReceiptOptions> {\n  const { account, transaction, gasless } = options;\n\n  if (account.onTransactionRequested) {\n    await account.onTransactionRequested(transaction);\n  }\n\n  const serializableTransaction = await toSerializableTransaction({\n    transaction: transaction,\n    from: account.address,\n  });\n\n  // branch for gasless transactions\n  if (gasless) {\n    // lazy load the gasless tx function because it's only needed for gasless transactions\n    const { sendGaslessTransaction } = await import(\n      \"./gasless/send-gasless-transaction.js\"\n    );\n    return sendGaslessTransaction({\n      account,\n      transaction,\n      serializableTransaction,\n      gasless,\n    });\n  }\n\n  const result = await account.sendTransaction(serializableTransaction);\n  // Store the transaction\n  addTransactionToStore({\n    address: account.address,\n    transactionHash: result.transactionHash,\n    chainId: transaction.chain.id,\n  });\n  return { ...result, chain: transaction.chain, client: transaction.client };\n}\n"],
  "mappings": ";;;;;;;;AA+BA,eAAsB,gBACpB,SAA+B;AAE/B,QAAM,EAAE,SAAS,aAAa,QAAO,IAAK;AAE1C,MAAI,QAAQ,wBAAwB;AAClC,UAAM,QAAQ,uBAAuB,WAAW;EAClD;AAEA,QAAM,0BAA0B,MAAM,0BAA0B;IAC9D;IACA,MAAM,QAAQ;GACf;AAGD,MAAI,SAAS;AAEX,UAAM,EAAE,uBAAsB,IAAK,MAAM,OACvC,wCAAuC;AAEzC,WAAO,uBAAuB;MAC5B;MACA;MACA;MACA;KACD;EACH;AAEA,QAAM,SAAS,MAAM,QAAQ,gBAAgB,uBAAuB;AAEpE,wBAAsB;IACpB,SAAS,QAAQ;IACjB,iBAAiB,OAAO;IACxB,SAAS,YAAY,MAAM;GAC5B;AACD,SAAO,EAAE,GAAG,QAAQ,OAAO,YAAY,OAAO,QAAQ,YAAY,OAAM;AAC1E;",
  "names": []
}
