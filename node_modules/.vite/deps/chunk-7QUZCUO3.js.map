{
  "version": 3,
  "sources": ["../../thirdweb/src/wallets/in-app/web/lib/auth/index.ts"],
  "sourcesContent": ["import type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport {\n  type AuthArgsType,\n  type AuthLoginReturnType,\n  type GetAuthenticatedUserParams,\n  type PreAuthArgsType,\n  UserWalletStatus,\n} from \"../../../core/authentication/type.js\";\nimport { getOrCreateInAppWalletConnector } from \"../../../core/wallet/in-app-core.js\";\nimport type { Ecosystem } from \"../../types.js\";\n\n// ---- KEEP IN SYNC WITH /wallets/in-app/native/auth/index.ts ---- //\n// duplication needed for separate exports between web and native\n\n/**\n * @internal\n */\nasync function getInAppWalletConnector(\n  client: ThirdwebClient,\n  ecosystem?: Ecosystem,\n) {\n  return getOrCreateInAppWalletConnector(\n    client,\n    async (client) => {\n      const { InAppWebConnector } = await import(\"../web-connector.js\");\n      return new InAppWebConnector({\n        client: client,\n        ecosystem: ecosystem,\n      });\n    },\n    ecosystem,\n  );\n}\n\n/**\n * Retrieves the authenticated user for the active in-app wallet.\n * @param options - The arguments for retrieving the authenticated user.\n * @returns The authenticated user if logged in and wallet initialized, otherwise undefined.\n * @example\n * ```ts\n * import { getAuthenticatedUser } from \"thirdweb/wallets/in-app\";\n *\n * const user = await getAuthenticatedUser({ client });\n * if (user) {\n *  console.log(user.walletAddress);\n * }\n * ```\n * @wallet\n */\nexport async function getAuthenticatedUser(\n  options: GetAuthenticatedUserParams,\n) {\n  const { client } = options;\n  const connector = await getInAppWalletConnector(client);\n  const user = await connector.getUser();\n  switch (user.status) {\n    case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\n      return user;\n    }\n  }\n  return undefined;\n}\n\n/**\n * Retrieves the authenticated user email for the active in-app wallet.\n * @param options - The arguments for retrieving the authenticated user.\n * @returns The authenticated user email if logged in and wallet initialized, otherwise undefined.\n * @example\n * ```ts\n * import { getUserEmail } from \"thirdweb/wallets/in-app\";\n *\n * const email = await getUserEmail({ client });\n * console.log(email);\n * ```\n * @wallet\n */\nexport async function getUserEmail(options: GetAuthenticatedUserParams) {\n  const user = await getAuthenticatedUser(options);\n  if (user && \"email\" in user.authDetails) {\n    return user.authDetails.email;\n  }\n  return undefined;\n}\n\n/**\n * Retrieves the authenticated user phone number for the active embedded wallet.\n * @param options - The arguments for retrieving the authenticated user.\n * @returns The authenticated user phone number if authenticated with phone number, otherwise undefined.\n * @example\n * ```ts\n * import { getUserPhoneNumber } from \"thirdweb/wallets/embedded\";\n *\n * const phoneNumber = await getUserPhoneNumber({ client });\n * console.log(phoneNumber);\n * ```\n * @wallet\n */\nexport async function getUserPhoneNumber(options: GetAuthenticatedUserParams) {\n  const user = await getAuthenticatedUser(options);\n  if (user && \"phoneNumber\" in user.authDetails) {\n    return user.authDetails.phoneNumber;\n  }\n  return undefined;\n}\n\n/**\n * Pre-authenticates the user based on the provided authentication strategy.\n * @param args - The arguments required for pre-authentication.\n * @returns A promise that resolves to the pre-authentication result.\n * @throws An error if the provided authentication strategy doesn't require pre-authentication.\n * @example\n * ```ts\n * import { preAuthenticate } from \"thirdweb/wallets/in-app\";\n *\n * const result = await preAuthenticate({\n *  client,\n *  strategy: \"email\",\n *  email: \"example@example.org\",\n * });\n * ```\n * @wallet\n */\nexport async function preAuthenticate(args: PreAuthArgsType) {\n  const connector = await getInAppWalletConnector(args.client, args.ecosystem);\n  return connector.preAuthenticate(args);\n}\n\n/**\n * Authenticates the user based on the provided authentication arguments.\n * @param args - The authentication arguments.\n * @returns A promise that resolves to the authentication result.\n * @example\n * ```ts\n * import { authenticate } from \"thirdweb/wallets/in-app\";\n *\n * const result = await authenticate({\n *  client,\n *  strategy: \"email\",\n *  email: \"example@example.org\",\n *  verificationCode: \"123456\",\n * });\n * ```\n * @wallet\n */\nexport async function authenticate(\n  args: AuthArgsType,\n): Promise<AuthLoginReturnType> {\n  const connector = await getInAppWalletConnector(args.client, args.ecosystem);\n  return connector.authenticate(args);\n}\n"],
  "mappings": ";;;;;;;;AAiBA,eAAe,wBACb,QACA,WAAqB;AAErB,SAAO,gCACL,QACA,OAAOA,YAAU;AACf,UAAM,EAAE,kBAAiB,IAAK,MAAM,OAAO,6BAAqB;AAChE,WAAO,IAAI,kBAAkB;MAC3B,QAAQA;MACR;KACD;EACH,GACA,SAAS;AAEb;AAiBA,eAAsB,qBACpB,SAAmC;AAEnC,QAAM,EAAE,OAAM,IAAK;AACnB,QAAM,YAAY,MAAM,wBAAwB,MAAM;AACtD,QAAM,OAAO,MAAM,UAAU,QAAO;AACpC,UAAQ,KAAK,QAAQ;IACnB,KAAK,iBAAiB,8BAA8B;AAClD,aAAO;IACT;EACF;AACA,SAAO;AACT;AAeA,eAAsB,aAAa,SAAmC;AACpE,QAAM,OAAO,MAAM,qBAAqB,OAAO;AAC/C,MAAI,QAAQ,WAAW,KAAK,aAAa;AACvC,WAAO,KAAK,YAAY;EAC1B;AACA,SAAO;AACT;AAeA,eAAsB,mBAAmB,SAAmC;AAC1E,QAAM,OAAO,MAAM,qBAAqB,OAAO;AAC/C,MAAI,QAAQ,iBAAiB,KAAK,aAAa;AAC7C,WAAO,KAAK,YAAY;EAC1B;AACA,SAAO;AACT;AAmBA,eAAsB,gBAAgB,MAAqB;AACzD,QAAM,YAAY,MAAM,wBAAwB,KAAK,QAAQ,KAAK,SAAS;AAC3E,SAAO,UAAU,gBAAgB,IAAI;AACvC;AAmBA,eAAsB,aACpB,MAAkB;AAElB,QAAM,YAAY,MAAM,wBAAwB,KAAK,QAAQ,KAAK,SAAS;AAC3E,SAAO,UAAU,aAAa,IAAI;AACpC;",
  "names": ["client"]
}
