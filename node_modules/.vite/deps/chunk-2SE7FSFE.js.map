{
  "version": 3,
  "sources": ["../../thirdweb/src/wallets/in-app/core/authentication/type.ts"],
  "sourcesContent": ["import type { AuthType } from \"@passwordless-id/webauthn/dist/esm/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport type { Account } from \"../../../interfaces/wallet.js\";\nimport type { SocialAuthOption } from \"../../../types.js\";\nimport type { Ecosystem } from \"../../web/types.js\";\n\nexport type MultiStepAuthProviderType =\n  | {\n      strategy: \"email\";\n      email: string;\n    }\n  | {\n      strategy: \"phone\";\n      phoneNumber: string;\n    };\nexport type PreAuthArgsType = MultiStepAuthProviderType & {\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n};\n\nexport type MultiStepAuthArgsType = MultiStepAuthProviderType & {\n  verificationCode: string;\n};\n\nexport type SingleStepAuthArgsType =\n  | {\n      strategy: SocialAuthOption;\n      openedWindow?: Window;\n      closeOpenedWindow?: (window: Window) => void;\n      redirectUrl?: string;\n    }\n  | { strategy: \"jwt\"; jwt: string; encryptionKey: string }\n  | { strategy: \"auth_endpoint\"; payload: string; encryptionKey: string }\n  | { strategy: \"iframe_email_verification\"; email: string }\n  | { strategy: \"iframe\" }\n  | {\n      strategy: \"passkey\";\n      type: \"sign-up\" | \"sign-in\";\n      passkeyName?: string;\n      authenticatorType?: AuthType;\n    };\n\nexport type AuthArgsType = (MultiStepAuthArgsType | SingleStepAuthArgsType) & {\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n};\n\n// TODO: remove usage of enums, instead use object with as const\nexport enum RecoveryShareManagement {\n  USER_MANAGED = \"USER_MANAGED\",\n  CLOUD_MANAGED = \"AWS_MANAGED\",\n}\n\n// TODO: remove usage of enums, instead use object with as const\nexport enum AuthProvider {\n  COGNITO = \"Cognito\",\n  GOOGLE = \"Google\",\n  EMAIL_OTP = \"EmailOtp\",\n  CUSTOM_JWT = \"CustomJWT\",\n  CUSTOM_AUTH_ENDPOINT = \"CustomAuthEndpoint\",\n  FACEBOOK = \"Facebook\",\n  APPLE = \"Apple\",\n  PASSKEY = \"Passkey\",\n}\n\nexport type OauthOption = {\n  provider: AuthProvider;\n  redirectUrl: string;\n};\n\n/**\n * @internal\n */\nexport type GetHeadlessLoginLinkReturnType = {\n  loginLink: string;\n};\n\nexport type UserDetailsApiType = {\n  status: string;\n  isNewUser: boolean;\n  walletUserId: string;\n  walletAddress: string;\n} & AuthStoredTokenWithCookieReturnType;\n\n// TODO: Clean up tech debt of random type Objects\n// E.g. StoredTokenType is really not used anywhere but it exists as this object for legacy reason\nexport type StoredTokenType = {\n  jwtToken: string;\n  authProvider: AuthProvider;\n  authDetails: AuthDetails;\n  developerClientId: string;\n};\n\nexport type AuthStoredTokenWithCookieReturnType = {\n  storedToken: StoredTokenType & {\n    cookieString: string;\n    shouldStoreCookieString: boolean;\n    isNewUser: boolean;\n  };\n};\nexport type AuthAndWalletRpcReturnType = AuthStoredTokenWithCookieReturnType & {\n  walletDetails: SetUpWalletRpcReturnType;\n};\n\nexport type AuthLoginReturnType = { user: InitializedUser };\n\n// Auth Types\nexport type AuthDetails = (\n  | {\n      email?: string;\n    }\n  | {\n      phoneNumber?: string;\n    }\n) & {\n  userWalletId: string;\n  encryptionKey?: string;\n  backupRecoveryCodes?: string[];\n  recoveryShareManagement: RecoveryShareManagement;\n};\n\nexport type InitializedUser = {\n  status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED;\n  walletAddress: string;\n  authDetails: AuthDetails;\n  account: Account; // TODO (rn) this doesn't feel right here, should access it from the connector\n};\n\n// In APp Wallet Types\nexport enum UserWalletStatus {\n  LOGGED_OUT = \"Logged Out\",\n  LOGGED_IN_WALLET_UNINITIALIZED = \"Logged In, Wallet Uninitialized\",\n  LOGGED_IN_NEW_DEVICE = \"Logged In, New Device\",\n  LOGGED_IN_WALLET_INITIALIZED = \"Logged In, Wallet Initialized\",\n}\n\nexport type WalletAddressObjectType = {\n  /**\n   * User's wallet address\n   */\n  walletAddress: string;\n};\n\nexport type SetUpWalletRpcReturnType = WalletAddressObjectType & {\n  /**\n   * the value that is saved for the user's device share.\n   * We save this into the localStorage on the site itself if we could not save it within the iframe's localStorage.\n   * This happens in incognito mostly\n   */\n  deviceShareStored: string;\n  /**\n   * Tells us if we were able to store values in the localStorage in our iframe.\n   * We need to store it under the dev's domain localStorage if we weren't able to store things in the iframe\n   */\n  isIframeStorageEnabled: boolean;\n};\n\nexport type SendEmailOtpReturnType = {\n  isNewUser: boolean;\n  isNewDevice: boolean;\n  recoveryShareManagement: RecoveryShareManagement;\n};\nexport type LogoutReturnType = { success: boolean };\n\n/**\n * @internal\n */\nexport type GetAuthDetailsReturnType = { authDetails?: AuthDetails };\n\n// ! Types seem repetitive, but the name should identify which goes where\n// this is the return type from the InAppWallet Class getUserWalletStatus method iframe call\nexport type GetUserWalletStatusRpcReturnType =\n  | {\n      status: UserWalletStatus.LOGGED_OUT;\n      user: undefined;\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED;\n      user: { authDetails: AuthDetails };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_NEW_DEVICE;\n      user: { authDetails: AuthDetails; walletAddress: string };\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED;\n      user: Omit<InitializedUser, \"account\" | \"status\">;\n    };\n\n// this is the return type from the InAppWallet Class getUserWalletStatus method\nexport type GetUser =\n  | {\n      status: UserWalletStatus.LOGGED_OUT;\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED;\n      authDetails: AuthDetails;\n    }\n  | {\n      status: UserWalletStatus.LOGGED_IN_NEW_DEVICE;\n      authDetails: AuthDetails;\n      walletAddress: string;\n    }\n  | InitializedUser;\n\nexport type GetAuthenticatedUserParams = {\n  client: ThirdwebClient;\n};\n\nexport const oauthStrategyToAuthProvider: Record<\n  \"google\" | \"facebook\" | \"apple\",\n  AuthProvider\n> = {\n  google: AuthProvider.GOOGLE,\n  facebook: AuthProvider.FACEBOOK,\n  apple: AuthProvider.APPLE,\n};\n"],
  "mappings": ";AAgDA,IAAY;CAAZ,SAAYA,0BAAuB;AACjC,EAAAA,yBAAA,cAAA,IAAA;AACA,EAAAA,yBAAA,eAAA,IAAA;AACF,GAHY,4BAAA,0BAAuB,CAAA,EAAA;AAMnC,IAAY;CAAZ,SAAYC,eAAY;AACtB,EAAAA,cAAA,SAAA,IAAA;AACA,EAAAA,cAAA,QAAA,IAAA;AACA,EAAAA,cAAA,WAAA,IAAA;AACA,EAAAA,cAAA,YAAA,IAAA;AACA,EAAAA,cAAA,sBAAA,IAAA;AACA,EAAAA,cAAA,UAAA,IAAA;AACA,EAAAA,cAAA,OAAA,IAAA;AACA,EAAAA,cAAA,SAAA,IAAA;AACF,GATY,iBAAA,eAAY,CAAA,EAAA;AA2ExB,IAAY;CAAZ,SAAYC,mBAAgB;AAC1B,EAAAA,kBAAA,YAAA,IAAA;AACA,EAAAA,kBAAA,gCAAA,IAAA;AACA,EAAAA,kBAAA,sBAAA,IAAA;AACA,EAAAA,kBAAA,8BAAA,IAAA;AACF,GALY,qBAAA,mBAAgB,CAAA,EAAA;AAgFrB,IAAM,8BAGT;EACF,QAAQ,aAAa;EACrB,UAAU,aAAa;EACvB,OAAO,aAAa;;",
  "names": ["RecoveryShareManagement", "AuthProvider", "UserWalletStatus"]
}
