{"abi":[{"type":"function","name":"verify","inputs":[{"name":"req","type":"tuple","internalType":"struct ISignatureAction.GenericRequest","components":[{"name":"validityStartTimestamp","type":"uint128","internalType":"uint128"},{"name":"validityEndTimestamp","type":"uint128","internalType":"uint128"},{"name":"uid","type":"bytes32","internalType":"bytes32"},{"name":"data","type":"bytes","internalType":"bytes"}]},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"signer","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"event","name":"RequestExecuted","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"signer","type":"address","indexed":true,"internalType":"address"},{"name":"_req","type":"tuple","indexed":false,"internalType":"struct ISignatureAction.GenericRequest","components":[{"name":"validityStartTimestamp","type":"uint128","internalType":"uint128"},{"name":"validityEndTimestamp","type":"uint128","internalType":"uint128"},{"name":"uid","type":"bytes32","internalType":"bytes32"},{"name":"data","type":"bytes","internalType":"bytes"}]}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"verify((uint128,uint128,bytes32,bytes),bytes)":"c4376dd7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"validityStartTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"validityEndTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct ISignatureAction.GenericRequest\",\"name\":\"_req\",\"type\":\"tuple\"}],\"name\":\"RequestExecuted\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"validityStartTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"validityEndTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ISignatureAction.GenericRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verify((uint128,uint128,bytes32,bytes),bytes)\":{\"params\":{\"req\":\"The payload signed by the authorized wallet.\",\"signature\":\"The signature produced by the authorized wallet signing the given payload.\"},\"returns\":{\"signer\":\"The address of the signer.\",\"success\":\"Whether the payload is signed by the authorized wallet.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"RequestExecuted(address,address,(uint128,uint128,bytes32,bytes))\":{\"notice\":\"Emitted when a payload is verified and executed.\"}},\"kind\":\"user\",\"methods\":{\"verify((uint128,uint128,bytes32,bytes),bytes)\":{\"notice\":\"Verfies that a payload is signed by an authorized wallet.\"}},\"notice\":\"thirdweb's `SignatureAction` extension smart contract can be used with any base smart contract. It provides a generic  payload struct that can be signed by an authorized wallet and verified by the contract. The bytes `data` field provided  in the payload can be abi encoded <-> decoded to use `SignatureContract` for any authorized signature action.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/ISignatureAction.sol\":\"ISignatureAction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/seaport/lib/solmate/\",\":@seaport/=lib/seaport/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":seaport-core/=lib/seaport/lib/seaport-core/\",\":seaport-sol/=lib/seaport-sol/src/\",\":seaport-types/=lib/seaport/lib/seaport-types/\",\":seaport/=lib/seaport/\",\":solady/=lib/solady/\",\":solarray/=lib/seaport/lib/solarray/src/\",\":solmate/=lib/seaport/lib/solmate/src/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/interface/ISignatureAction.sol\":{\"keccak256\":\"0xafb58aafdcc00c1f2faef41b4a219812bb8ff1940dc3537a800df442595d16a1\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://025d8cd1f20eba7ff481a9dd79cd134c4bf6e8a96735362db925afa61799a72d\",\"dweb:/ipfs/QmZXcEHcy3SXRxn6Bny5rVL7Bct9EQx9VofqLfs8CH5R4A\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":true},{"internalType":"address","name":"signer","type":"address","indexed":true},{"internalType":"struct ISignatureAction.GenericRequest","name":"_req","type":"tuple","components":[{"internalType":"uint128","name":"validityStartTimestamp","type":"uint128"},{"internalType":"uint128","name":"validityEndTimestamp","type":"uint128"},{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}],"indexed":false}],"type":"event","name":"RequestExecuted","anonymous":false},{"inputs":[{"internalType":"struct ISignatureAction.GenericRequest","name":"req","type":"tuple","components":[{"internalType":"uint128","name":"validityStartTimestamp","type":"uint128"},{"internalType":"uint128","name":"validityEndTimestamp","type":"uint128"},{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}]},{"internalType":"bytes","name":"signature","type":"bytes"}],"stateMutability":"view","type":"function","name":"verify","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"address","name":"signer","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"verify((uint128,uint128,bytes32,bytes),bytes)":{"params":{"req":"The payload signed by the authorized wallet.","signature":"The signature produced by the authorized wallet signing the given payload."},"returns":{"signer":"The address of the signer.","success":"Whether the payload is signed by the authorized wallet."}}},"version":1},"userdoc":{"kind":"user","methods":{"verify((uint128,uint128,bytes32,bytes),bytes)":{"notice":"Verfies that a payload is signed by an authorized wallet."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/seaport/lib/solmate/","@seaport/=lib/seaport/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","murky/=lib/murky/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","seaport-core/=lib/seaport/lib/seaport-core/","seaport-sol/=lib/seaport-sol/src/","seaport-types/=lib/seaport/lib/seaport-types/","seaport/=lib/seaport/","solady/=lib/solady/","solarray/=lib/seaport/lib/solarray/src/","solmate/=lib/seaport/lib/solmate/src/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/extension/interface/ISignatureAction.sol":"ISignatureAction"},"evmVersion":"london","libraries":{}},"sources":{"contracts/extension/interface/ISignatureAction.sol":{"keccak256":"0xafb58aafdcc00c1f2faef41b4a219812bb8ff1940dc3537a800df442595d16a1","urls":["bzz-raw://025d8cd1f20eba7ff481a9dd79cd134c4bf6e8a96735362db925afa61799a72d","dweb:/ipfs/QmZXcEHcy3SXRxn6Bny5rVL7Bct9EQx9VofqLfs8CH5R4A"],"license":"Apache-2.0"}},"version":1},"id":139}