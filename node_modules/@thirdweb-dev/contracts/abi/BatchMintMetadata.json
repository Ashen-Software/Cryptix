{"abi":[{"type":"function","name":"batchFrozen","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"getBaseURICount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getBatchIdAtIndex","inputs":[{"name":"_index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"event","name":"BatchMetadataUpdate","inputs":[{"name":"_fromTokenId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"_toTokenId","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"MetadataFrozen","inputs":[],"anonymous":false},{"type":"error","name":"BatchMintInvalidBatchId","inputs":[{"name":"index","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"BatchMintInvalidTokenId","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"BatchMintMetadataFrozen","inputs":[{"name":"batchId","type":"uint256","internalType":"uint256"}]}],"bytecode":{"object":"0x608060405234801561001057600080fd5b5061015b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632419f51b1461004657806363b45e2d1461006c5780638304053214610074575b600080fd5b6100596100543660046100f6565b6100a7565b6040519081526020015b60405180910390f35b600054610059565b6100976100823660046100f6565b60026020526000908152604090205460ff1681565b6040519015158152602001610063565b6000805482106100d157604051630793127760e11b81526004810183905260240160405180910390fd5b600082815481106100e4576100e461010f565b90600052602060002001549050919050565b60006020828403121561010857600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a45b8ca5bff3ce9dfc8fe2669918a1804ba160ed8cbf69d0e6ca3f5b693049f464736f6c63430008170033","sourceMap":"483:4873:54:-:0;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632419f51b1461004657806363b45e2d1461006c5780638304053214610074575b600080fd5b6100596100543660046100f6565b6100a7565b6040519081526020015b60405180910390f35b600054610059565b6100976100823660046100f6565b60026020526000908152604090205460ff1681565b6040519015158152602001610063565b6000805482106100d157604051630793127760e11b81526004810183905260240160405180910390fd5b600082815481106100e4576100e461010f565b90600052602060002001549050919050565b60006020828403121561010857600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a45b8ca5bff3ce9dfc8fe2669918a1804ba160ed8cbf69d0e6ca3f5b693049f464736f6c63430008170033","sourceMap":"483:4873:54:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2279:218;;;;;;:::i;:::-;;:::i;:::-;;;345:25:844;;;333:2;318:18;2279:218:54;;;;;;;;1961:96;2009:7;2035:15;1961:96;;1204:43;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;546:14:844;;539:22;521:41;;509:2;494:18;1204:43:54;381:187:844;2279:218:54;2343:7;2035:15;;2366:6;:27;2362:96;;2416:31;;-1:-1:-1;;;2416:31:54;;;;;345:25:844;;;318:18;;2416:31:54;;;;;;;2362:96;2474:8;2483:6;2474:16;;;;;;;;:::i;:::-;;;;;;;;;2467:23;;2279:218;;;:::o;14:180:844:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:844;;14:180;-1:-1:-1;14:180:844:o;573:127::-;634:10;629:3;625:20;622:1;615:31;665:4;662:1;655:15;689:4;686:1;679:15","linkReferences":{}},"methodIdentifiers":{"batchFrozen(uint256)":"83040532","getBaseURICount()":"63b45e2d","getBatchIdAtIndex(uint256)":"2419f51b"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BatchMintInvalidBatchId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMintInvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"BatchMintMetadataFrozen\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetadataFrozen\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURICount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatchIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"BatchMintInvalidBatchId(uint256)\":[{\"details\":\"Invalid index for batch\"}],\"BatchMintInvalidTokenId(uint256)\":[{\"details\":\"Invalid token\"}],\"BatchMintMetadataFrozen(uint256)\":[{\"details\":\"Metadata frozen\"}]},\"events\":{\"MetadataFrozen()\":{\"details\":\"This event emits when the metadata of all tokens are frozen. While not currently supported by marketplaces, this event allows future indexing if desired.\"}},\"kind\":\"dev\",\"methods\":{\"getBaseURICount()\":{\"details\":\"Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}.\"},\"getBatchIdAtIndex(uint256)\":{\"details\":\"See {getBaseURICount}.\",\"params\":{\"_index\":\"Index of the desired batch in batchIds array.\"}}},\"stateVariables\":{\"baseURI\":{\"details\":\"Mapping from id of a batch of tokens => to base URI for the respective batch of tokens.\"},\"batchFrozen\":{\"details\":\"Mapping from id of a batch of tokens => to whether the base URI for the respective batch of tokens is frozen.\"},\"batchIds\":{\"details\":\"Largest tokenId of each batch of tokens with the same baseURI + 1 {ex: batchId 100 at position 0 includes tokens 0-99}\"}},\"title\":\"Batch-mint Metadata\",\"version\":1},\"userdoc\":{\"events\":{\"BatchMetadataUpdate(uint256,uint256)\":{\"notice\":\"So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"}},\"kind\":\"user\",\"methods\":{\"getBaseURICount()\":{\"notice\":\"Returns the count of batches of NFTs.\"},\"getBatchIdAtIndex(uint256)\":{\"notice\":\"Returns the ID for the batch of tokens at the given index.\"}},\"notice\":\"The `BatchMintMetadata` is a contract extension for any base NFT contract. It lets the smart contract           using this extension set metadata for `n` number of NFTs all at once. This is enabled by storing a single           base URI for a batch of `n` NFTs, where the metadata for each NFT in a relevant batch is `baseURI/tokenId`.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/BatchMintMetadata.sol\":\"BatchMintMetadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/seaport/lib/solmate/\",\":@seaport/=lib/seaport/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":seaport-core/=lib/seaport/lib/seaport-core/\",\":seaport-sol/=lib/seaport-sol/src/\",\":seaport-types/=lib/seaport/lib/seaport-types/\",\":seaport/=lib/seaport/\",\":solady/=lib/solady/\",\":solarray/=lib/seaport/lib/solarray/src/\",\":solmate/=lib/seaport/lib/solmate/src/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/BatchMintMetadata.sol\":{\"keccak256\":\"0x97bf86276ecd830c41636c93b1aff2bd2271b5ca1e5b6ccd2813fbce240f96d1\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://e6db0f351255c37e0a9cce1357b7adb93c321e16651d2ba1cefbc47e126e90a1\",\"dweb:/ipfs/QmfNpmBBU5K8N4aGV8kTHvdD1oaP8XiWekizvEDyfeGDMw\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"type":"error","name":"BatchMintInvalidBatchId"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"type":"error","name":"BatchMintInvalidTokenId"},{"inputs":[{"internalType":"uint256","name":"batchId","type":"uint256"}],"type":"error","name":"BatchMintMetadataFrozen"},{"inputs":[{"internalType":"uint256","name":"_fromTokenId","type":"uint256","indexed":false},{"internalType":"uint256","name":"_toTokenId","type":"uint256","indexed":false}],"type":"event","name":"BatchMetadataUpdate","anonymous":false},{"inputs":[],"type":"event","name":"MetadataFrozen","anonymous":false},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","name":"batchFrozen","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getBaseURICount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"stateMutability":"view","type":"function","name":"getBatchIdAtIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"getBaseURICount()":{"details":"Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}."},"getBatchIdAtIndex(uint256)":{"details":"See {getBaseURICount}.","params":{"_index":"Index of the desired batch in batchIds array."}}},"version":1},"userdoc":{"kind":"user","methods":{"getBaseURICount()":{"notice":"Returns the count of batches of NFTs."},"getBatchIdAtIndex(uint256)":{"notice":"Returns the ID for the batch of tokens at the given index."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/seaport/lib/solmate/","@seaport/=lib/seaport/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","murky/=lib/murky/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","seaport-core/=lib/seaport/lib/seaport-core/","seaport-sol/=lib/seaport-sol/src/","seaport-types/=lib/seaport/lib/seaport-types/","seaport/=lib/seaport/","solady/=lib/solady/","solarray/=lib/seaport/lib/solarray/src/","solmate/=lib/seaport/lib/solmate/src/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/extension/BatchMintMetadata.sol":"BatchMintMetadata"},"evmVersion":"london","libraries":{}},"sources":{"contracts/extension/BatchMintMetadata.sol":{"keccak256":"0x97bf86276ecd830c41636c93b1aff2bd2271b5ca1e5b6ccd2813fbce240f96d1","urls":["bzz-raw://e6db0f351255c37e0a9cce1357b7adb93c321e16651d2ba1cefbc47e126e90a1","dweb:/ipfs/QmfNpmBBU5K8N4aGV8kTHvdD1oaP8XiWekizvEDyfeGDMw"],"license":"Apache-2.0"}},"version":1},"id":54}