{"abi":[{"type":"function","name":"claim","inputs":[{"name":"_receiver","type":"address","internalType":"address"},{"name":"_quantity","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"verifyClaim","inputs":[{"name":"_claimer","type":"address","internalType":"address"},{"name":"_quantity","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"view"},{"type":"event","name":"TokensClaimed","inputs":[{"name":"claimer","type":"address","indexed":true,"internalType":"address"},{"name":"receiver","type":"address","indexed":true,"internalType":"address"},{"name":"startTokenId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"quantityClaimed","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"claim(address,uint256)":"aad3ec96","verifyClaim(address,uint256)":"2f92023a"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"verifyClaim\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"thirdweb\",\"events\":{\"TokensClaimed(address,address,uint256,uint256)\":{\"details\":\"Emitted when tokens are claimed\"}},\"kind\":\"dev\",\"methods\":{\"claim(address,uint256)\":{\"details\":\"The logic in the `verifyClaim` function determines whether the caller is authorized to mint NFTs.\",\"params\":{\"_quantity\":\"The number of NFTs to mint.\",\"_receiver\":\"The recipient of the NFT to mint.\"}},\"verifyClaim(address,uint256)\":{\"details\":\"Checks a request to claim NFTs against a custom condition.\",\"params\":{\"_claimer\":\"Caller of the claim function.\",\"_quantity\":\"The number of NFTs being claimed.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256)\":{\"notice\":\"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   Contract creators should override this function to create custom logic for claiming,                   for e.g. price collection, allowlist, max quantity, etc.\"},\"verifyClaim(address,uint256)\":{\"notice\":\"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/interface/IClaimableERC721.sol\":\"IClaimableERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/seaport/lib/solmate/\",\":@seaport/=lib/seaport/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":seaport-core/=lib/seaport/lib/seaport-core/\",\":seaport-sol/=lib/seaport-sol/src/\",\":seaport-types/=lib/seaport/lib/seaport-types/\",\":seaport/=lib/seaport/\",\":solady/=lib/solady/\",\":solarray/=lib/seaport/lib/solarray/src/\",\":solmate/=lib/seaport/lib/solmate/src/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/interface/IClaimableERC721.sol\":{\"keccak256\":\"0x867213bc7e2ad03ab3a1bc6f7bb4928ef9dbf2f80007f2db330703c62c24e960\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3df6a8ffcfb67316f7c5f142542098c4ab6276902cda76e3ed3e7080b96dd929\",\"dweb:/ipfs/QmaT2N7Y4sg2h9Weyp3ASnbAdiFEoqSRhdAciweEoGxj9Y\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"claimer","type":"address","indexed":true},{"internalType":"address","name":"receiver","type":"address","indexed":true},{"internalType":"uint256","name":"startTokenId","type":"uint256","indexed":true},{"internalType":"uint256","name":"quantityClaimed","type":"uint256","indexed":false}],"type":"event","name":"TokensClaimed","anonymous":false},{"inputs":[{"internalType":"address","name":"_receiver","type":"address"},{"internalType":"uint256","name":"_quantity","type":"uint256"}],"stateMutability":"payable","type":"function","name":"claim"},{"inputs":[{"internalType":"address","name":"_claimer","type":"address"},{"internalType":"uint256","name":"_quantity","type":"uint256"}],"stateMutability":"view","type":"function","name":"verifyClaim"}],"devdoc":{"kind":"dev","methods":{"claim(address,uint256)":{"details":"The logic in the `verifyClaim` function determines whether the caller is authorized to mint NFTs.","params":{"_quantity":"The number of NFTs to mint.","_receiver":"The recipient of the NFT to mint."}},"verifyClaim(address,uint256)":{"details":"Checks a request to claim NFTs against a custom condition.","params":{"_claimer":"Caller of the claim function.","_quantity":"The number of NFTs being claimed."}}},"version":1},"userdoc":{"kind":"user","methods":{"claim(address,uint256)":{"notice":"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   Contract creators should override this function to create custom logic for claiming,                   for e.g. price collection, allowlist, max quantity, etc."},"verifyClaim(address,uint256)":{"notice":"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/seaport/lib/solmate/","@seaport/=lib/seaport/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","murky/=lib/murky/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","seaport-core/=lib/seaport/lib/seaport-core/","seaport-sol/=lib/seaport-sol/src/","seaport-types/=lib/seaport/lib/seaport-types/","seaport/=lib/seaport/","solady/=lib/solady/","solarray/=lib/seaport/lib/solarray/src/","solmate/=lib/seaport/lib/solmate/src/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/extension/interface/IClaimableERC721.sol":"IClaimableERC721"},"evmVersion":"london","libraries":{}},"sources":{"contracts/extension/interface/IClaimableERC721.sol":{"keccak256":"0x867213bc7e2ad03ab3a1bc6f7bb4928ef9dbf2f80007f2db330703c62c24e960","urls":["bzz-raw://3df6a8ffcfb67316f7c5f142542098c4ab6276902cda76e3ed3e7080b96dd929","dweb:/ipfs/QmaT2N7Y4sg2h9Weyp3ASnbAdiFEoqSRhdAciweEoGxj9Y"],"license":"Apache-2.0"}},"version":1},"id":109}