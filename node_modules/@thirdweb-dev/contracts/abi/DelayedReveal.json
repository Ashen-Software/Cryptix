{"abi":[{"type":"function","name":"encryptDecrypt","inputs":[{"name":"data","type":"bytes","internalType":"bytes"},{"name":"key","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"result","type":"bytes","internalType":"bytes"}],"stateMutability":"pure"},{"type":"function","name":"encryptedData","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"getRevealURI","inputs":[{"name":"_batchId","type":"uint256","internalType":"uint256"},{"name":"_key","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"revealedURI","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"isEncryptedBatch","inputs":[{"name":"_batchId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"reveal","inputs":[{"name":"identifier","type":"uint256","internalType":"uint256"},{"name":"key","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"revealedURI","type":"string","internalType":"string"}],"stateMutability":"nonpayable"},{"type":"event","name":"TokenURIRevealed","inputs":[{"name":"index","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"revealedURI","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"error","name":"DelayedRevealIncorrectResultHash","inputs":[{"name":"expected","type":"bytes32","internalType":"bytes32"},{"name":"actual","type":"bytes32","internalType":"bytes32"}]},{"type":"error","name":"DelayedRevealNothingToReveal","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"encryptDecrypt(bytes,bytes)":"e7150322","encryptedData(uint256)":"a05112fc","getRevealURI(uint256,bytes)":"9fc4d68f","isEncryptedBatch(uint256)":"492e224b","reveal(uint256,bytes)":"ce805642"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"DelayedRevealIncorrectResultHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelayedRevealNothingToReveal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"name\":\"TokenURIRevealed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"encryptDecrypt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"encryptedData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"}],\"name\":\"getRevealURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"}],\"name\":\"isEncryptedBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"reveal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"DelayedRevealIncorrectResultHash(bytes32,bytes32)\":[{\"details\":\"The result of the returned an incorrect hash\"}],\"DelayedRevealNothingToReveal()\":[{\"details\":\"The contract doesn't have any url to be delayed revealed\"}]},\"events\":{\"TokenURIRevealed(uint256,string)\":{\"details\":\"Emitted when tokens are revealed.\"}},\"kind\":\"dev\",\"methods\":{\"encryptDecrypt(bytes,bytes)\":{\"details\":\"Encrypt/decrypt given `data` with `key`. Uses inline assembly.                  See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain\",\"params\":{\"data\":\"Bytes of data to encrypt/decrypt.\",\"key\":\"Secure key used by caller for encryption/decryption.\"},\"returns\":{\"result\":\" Output after encryption/decryption of given data.\"}},\"getRevealURI(uint256,bytes)\":{\"details\":\"Reveal encrypted base URI for `_batchId` with caller/admin's `_key` used for encryption.                      Reverts if there's no encrypted URI for `_batchId`.                      See {encryptDecrypt}.\",\"params\":{\"_batchId\":\"ID of the batch for which URI is being revealed.\",\"_key\":\"Secure key used by caller/admin for encryption of baseURI.\"},\"returns\":{\"revealedURI\":\"Decrypted base URI.\"}},\"isEncryptedBatch(uint256)\":{\"details\":\"Returns `true` if `_batchId`'s base URI is encrypted.\",\"params\":{\"_batchId\":\"ID of a batch of NFTs.\"}},\"reveal(uint256,bytes)\":{\"params\":{\"identifier\":\"The ID for the batch of delayed-reveal NFTs to reveal.\",\"key\":\"The key with which the base URI for the relevant batch of NFTs was encrypted.\"}}},\"stateVariables\":{\"encryptedData\":{\"details\":\"Mapping from tokenId of a batch of tokens => to delayed reveal data.\"}},\"title\":\"Delayed Reveal\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"encryptDecrypt(bytes,bytes)\":{\"notice\":\"Encrypt/decrypt data on chain.\"},\"getRevealURI(uint256,bytes)\":{\"notice\":\"Returns revealed URI for a batch of NFTs.\"},\"isEncryptedBatch(uint256)\":{\"notice\":\"Returns whether the relvant batch of NFTs is subject to a delayed reveal.\"},\"reveal(uint256,bytes)\":{\"notice\":\"Reveals a batch of delayed reveal NFTs.\"}},\"notice\":\"Thirdweb's `DelayedReveal` is a contract extension for base NFT contracts. It lets you create batches of           'delayed-reveal' NFTs. You can learn more about the usage of delayed reveal NFTs here - https://blog.thirdweb.com/delayed-reveal-nfts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extension/DelayedReveal.sol\":\"DelayedReveal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/seaport/lib/solmate/\",\":@seaport/=lib/seaport/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":lib/sstore2/=lib/dynamic-contracts/lib/sstore2/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":seaport-core/=lib/seaport/lib/seaport-core/\",\":seaport-sol/=lib/seaport-sol/src/\",\":seaport-types/=lib/seaport/lib/seaport-types/\",\":seaport/=lib/seaport/\",\":solady/=lib/solady/\",\":solarray/=lib/seaport/lib/solarray/src/\",\":solmate/=lib/seaport/lib/solmate/src/\",\":sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/\"]},\"sources\":{\"contracts/extension/DelayedReveal.sol\":{\"keccak256\":\"0x88da8b7c6a511f811888a36148060c430d873f337f0b511892d5402733916065\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://229711e5eea3d6f5bb43520e1f79e1d5c342c056fd949f580d2bcb02895ae495\",\"dweb:/ipfs/Qme39HmWevQy1FuBMPHbFY981xx9nowwSaz9iE1tYDJQSj\"]},\"contracts/extension/interface/IDelayedReveal.sol\":{\"keccak256\":\"0xbbe98263ebce49f81cb42f8bf1e7e631afd81cda73be79b907e81a2f54fd2123\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://76913c2086e309c97ac0d5be72bbe23e66fe35e231c75318993c14e6aa4c0138\",\"dweb:/ipfs/QmXwr49U275Cam8x9mYcNdcCmZHUYuBge3CtFPkBkEMzL4\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"expected","type":"bytes32"},{"internalType":"bytes32","name":"actual","type":"bytes32"}],"type":"error","name":"DelayedRevealIncorrectResultHash"},{"inputs":[],"type":"error","name":"DelayedRevealNothingToReveal"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256","indexed":true},{"internalType":"string","name":"revealedURI","type":"string","indexed":false}],"type":"event","name":"TokenURIRevealed","anonymous":false},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"key","type":"bytes"}],"stateMutability":"pure","type":"function","name":"encryptDecrypt","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}]},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","name":"encryptedData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"uint256","name":"_batchId","type":"uint256"},{"internalType":"bytes","name":"_key","type":"bytes"}],"stateMutability":"view","type":"function","name":"getRevealURI","outputs":[{"internalType":"string","name":"revealedURI","type":"string"}]},{"inputs":[{"internalType":"uint256","name":"_batchId","type":"uint256"}],"stateMutability":"view","type":"function","name":"isEncryptedBatch","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"identifier","type":"uint256"},{"internalType":"bytes","name":"key","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"reveal","outputs":[{"internalType":"string","name":"revealedURI","type":"string"}]}],"devdoc":{"kind":"dev","methods":{"encryptDecrypt(bytes,bytes)":{"details":"Encrypt/decrypt given `data` with `key`. Uses inline assembly.                  See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain","params":{"data":"Bytes of data to encrypt/decrypt.","key":"Secure key used by caller for encryption/decryption."},"returns":{"result":" Output after encryption/decryption of given data."}},"getRevealURI(uint256,bytes)":{"details":"Reveal encrypted base URI for `_batchId` with caller/admin's `_key` used for encryption.                      Reverts if there's no encrypted URI for `_batchId`.                      See {encryptDecrypt}.","params":{"_batchId":"ID of the batch for which URI is being revealed.","_key":"Secure key used by caller/admin for encryption of baseURI."},"returns":{"revealedURI":"Decrypted base URI."}},"isEncryptedBatch(uint256)":{"details":"Returns `true` if `_batchId`'s base URI is encrypted.","params":{"_batchId":"ID of a batch of NFTs."}},"reveal(uint256,bytes)":{"params":{"identifier":"The ID for the batch of delayed-reveal NFTs to reveal.","key":"The key with which the base URI for the relevant batch of NFTs was encrypted."}}},"version":1},"userdoc":{"kind":"user","methods":{"encryptDecrypt(bytes,bytes)":{"notice":"Encrypt/decrypt data on chain."},"getRevealURI(uint256,bytes)":{"notice":"Returns revealed URI for a batch of NFTs."},"isEncryptedBatch(uint256)":{"notice":"Returns whether the relvant batch of NFTs is subject to a delayed reveal."},"reveal(uint256,bytes)":{"notice":"Reveals a batch of delayed reveal NFTs."}},"version":1}},"settings":{"remappings":["@chainlink/=lib/chainlink/","@ds-test/=lib/ds-test/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/seaport/lib/solmate/","@seaport/=lib/seaport/contracts/","@std/=lib/forge-std/src/","@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/","ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/","ERC721A/=lib/ERC721A/contracts/","chainlink/=lib/chainlink/contracts/","contracts/=contracts/","ds-test/=lib/ds-test/src/","dynamic-contracts/=lib/dynamic-contracts/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=lib/ERC721A-Upgradeable/","erc721a/=lib/ERC721A/","forge-std/=lib/forge-std/src/","lib/sstore2/=lib/dynamic-contracts/lib/sstore2/","murky/=lib/murky/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","seaport-core/=lib/seaport/lib/seaport-core/","seaport-sol/=lib/seaport-sol/src/","seaport-types/=lib/seaport/lib/seaport-types/","seaport/=lib/seaport/","solady/=lib/solady/","solarray/=lib/seaport/lib/solarray/src/","solmate/=lib/seaport/lib/solmate/src/","sstore2/=lib/dynamic-contracts/lib/sstore2/contracts/"],"optimizer":{"enabled":true,"runs":20},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/extension/DelayedReveal.sol":"DelayedReveal"},"evmVersion":"london","libraries":{}},"sources":{"contracts/extension/DelayedReveal.sol":{"keccak256":"0x88da8b7c6a511f811888a36148060c430d873f337f0b511892d5402733916065","urls":["bzz-raw://229711e5eea3d6f5bb43520e1f79e1d5c342c056fd949f580d2bcb02895ae495","dweb:/ipfs/Qme39HmWevQy1FuBMPHbFY981xx9nowwSaz9iE1tYDJQSj"],"license":"Apache-2.0"},"contracts/extension/interface/IDelayedReveal.sol":{"keccak256":"0xbbe98263ebce49f81cb42f8bf1e7e631afd81cda73be79b907e81a2f54fd2123","urls":["bzz-raw://76913c2086e309c97ac0d5be72bbe23e66fe35e231c75318993c14e6aa4c0138","dweb:/ipfs/QmXwr49U275Cam8x9mYcNdcCmZHUYuBge3CtFPkBkEMzL4"],"license":"Apache-2.0"}},"version":1},"id":57}