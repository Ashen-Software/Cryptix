import type { AbiParameter, AbiParametersToPrimitiveTypes } from 'abitype';
import type { ByteArray, Hex } from '../../types/misc.js';
import { type InvalidAbiDecodingTypeErrorType } from '../../errors/abi.js';
import type { ErrorType } from '../../errors/utils.js';
import { type ChecksumAddressErrorType } from '../address/getAddress.js';
import { type SizeErrorType } from '../data/size.js';
import { type SliceBytesErrorType } from '../data/slice.js';
import { type TrimErrorType } from '../data/trim.js';
import { type BytesToBigIntErrorType, type BytesToBoolErrorType, type BytesToNumberErrorType, type BytesToStringErrorType } from '../encoding/fromBytes.js';
import { type HexToBytesErrorType } from '../encoding/toBytes.js';
import { type BytesToHexErrorType } from '../encoding/toHex.js';
export type DecodeAbiParametersReturnType<TParams extends readonly AbiParameter[] = readonly AbiParameter[]> = AbiParametersToPrimitiveTypes<TParams extends readonly AbiParameter[] ? TParams : AbiParameter[]>;
export type DecodeAbiParametersErrorType = HexToBytesErrorType | BytesToHexErrorType | DecodeParameterErrorType | SizeErrorType | ErrorType;
export declare function decodeAbiParameters<const TParams extends readonly AbiParameter[]>(params: TParams, data: ByteArray | Hex): DecodeAbiParametersReturnType<TParams>;
type DecodeParameterErrorType = DecodeArrayErrorType | DecodeTupleErrorType | DecodeAddressErrorType | DecodeBoolErrorType | DecodeBytesErrorType | DecodeNumberErrorType | DecodeStringErrorType | InvalidAbiDecodingTypeErrorType;
type DecodeAddressErrorType = ChecksumAddressErrorType | BytesToHexErrorType | SliceBytesErrorType | ErrorType;
type DecodeArrayErrorType = BytesToNumberErrorType | ErrorType;
type DecodeBoolErrorType = BytesToBoolErrorType | ErrorType;
type DecodeBytesErrorType = BytesToNumberErrorType | BytesToHexErrorType | ErrorType;
type DecodeNumberErrorType = BytesToNumberErrorType | BytesToBigIntErrorType | ErrorType;
type DecodeTupleErrorType = BytesToNumberErrorType | ErrorType;
type DecodeStringErrorType = BytesToNumberErrorType | BytesToStringErrorType | TrimErrorType | ErrorType;
export {};
//# sourceMappingURL=decodeAbiParameters.d.ts.map