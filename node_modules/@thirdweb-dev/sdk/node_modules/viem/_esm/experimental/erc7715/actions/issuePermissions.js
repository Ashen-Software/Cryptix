import { numberToHex } from '../../../utils/encoding/toHex.js';
/**
 * Request permissions from a wallet to perform actions on behalf of a user.
 *
 * - Docs: https://viem.sh/experimental/erc7715/issuePermissions
 *
 * @example
 * import { createWalletClient, custom } from 'viem'
 * import { mainnet } from 'viem/chains'
 * import { issuePermissions } from 'viem/experimental'
 *
 * const client = createWalletClient({
 *   chain: mainnet,
 *   transport: custom(window.ethereum),
 * })
 *
 * const result = await issuePermissions(client, {
 *   expiry: 1716846083638,
 *   permissions: [
 *     {
 *       type: 'contract-call',
 *       data: {
 *         address: '0x0000000000000000000000000000000000000000',
 *       },
 *     },
 *     {
 *       type: 'native-token-limit',
 *       data: {
 *         amount: 69420n,
 *       },
 *       required: true,
 *     },
 *   ],
 * })
 */
export async function issuePermissions(client, parameters) {
    const { expiry, permissions, signer } = parameters;
    const result = await client.request({
        method: 'wallet_issuePermissions',
        params: [parseParameters({ expiry, permissions, signer })],
    });
    return parseResult(result);
}
function parseParameters(parameters) {
    const { account, expiry, permissions, signer: signer_ } = parameters;
    const signer = (() => {
        if (!account && !signer_)
            return undefined;
        if (account) {
            // Address as signer.
            if (typeof account === 'string')
                return {
                    type: 'account',
                    data: {
                        id: account,
                    },
                };
            // Viem Account as signer.
            return {
                type: 'account',
                data: {
                    id: account.address,
                },
            };
        }
        // ERC-7715 Signer as signer.
        return signer_;
    })();
    return {
        expiry,
        permissions: permissions.map((permission) => ({
            ...permission,
            ...(permission.data && typeof permission.data === 'object'
                ? {
                    data: {
                        ...permission.data,
                        ...('amount' in permission.data &&
                            typeof permission.data.amount === 'bigint'
                            ? { amount: numberToHex(permission.data.amount) }
                            : {}),
                    },
                }
                : {}),
            required: permission.required ?? false,
        })),
        ...(signer ? { signer } : {}),
    };
}
function parseResult(result) {
    return {
        expiry: result.expiry,
        ...(result.factory ? { factory: result.factory } : {}),
        ...(result.factoryData ? { factoryData: result.factoryData } : {}),
        grantedPermissions: result.grantedPermissions.map((permission) => ({
            ...permission,
            data: {
                ...permission.data,
                ...('amount' in permission.data
                    ? { amount: BigInt(permission.data.amount) }
                    : {}),
            },
        })),
        permissionsContext: result.permissionsContext,
        ...(result.signerData ? { signerData: result.signerData } : {}),
    };
}
//# sourceMappingURL=issuePermissions.js.map