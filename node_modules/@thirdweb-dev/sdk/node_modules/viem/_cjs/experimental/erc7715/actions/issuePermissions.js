"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.issuePermissions = void 0;
const toHex_js_1 = require("../../../utils/encoding/toHex.js");
async function issuePermissions(client, parameters) {
    const { expiry, permissions, signer } = parameters;
    const result = await client.request({
        method: 'wallet_issuePermissions',
        params: [parseParameters({ expiry, permissions, signer })],
    });
    return parseResult(result);
}
exports.issuePermissions = issuePermissions;
function parseParameters(parameters) {
    const { account, expiry, permissions, signer: signer_ } = parameters;
    const signer = (() => {
        if (!account && !signer_)
            return undefined;
        if (account) {
            if (typeof account === 'string')
                return {
                    type: 'account',
                    data: {
                        id: account,
                    },
                };
            return {
                type: 'account',
                data: {
                    id: account.address,
                },
            };
        }
        return signer_;
    })();
    return {
        expiry,
        permissions: permissions.map((permission) => ({
            ...permission,
            ...(permission.data && typeof permission.data === 'object'
                ? {
                    data: {
                        ...permission.data,
                        ...('amount' in permission.data &&
                            typeof permission.data.amount === 'bigint'
                            ? { amount: (0, toHex_js_1.numberToHex)(permission.data.amount) }
                            : {}),
                    },
                }
                : {}),
            required: permission.required ?? false,
        })),
        ...(signer ? { signer } : {}),
    };
}
function parseResult(result) {
    return {
        expiry: result.expiry,
        ...(result.factory ? { factory: result.factory } : {}),
        ...(result.factoryData ? { factoryData: result.factoryData } : {}),
        grantedPermissions: result.grantedPermissions.map((permission) => ({
            ...permission,
            data: {
                ...permission.data,
                ...('amount' in permission.data
                    ? { amount: BigInt(permission.data.amount) }
                    : {}),
            },
        })),
        permissionsContext: result.permissionsContext,
        ...(result.signerData ? { signerData: result.signerData } : {}),
    };
}
//# sourceMappingURL=issuePermissions.js.map